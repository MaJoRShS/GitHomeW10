Aula 1 : Intro

blábláblá.

Aula 2 : Preparando o ambiente

Visual studio code.

criou o index.html e o index.js e ai depois aponta o js para o html e já elvis.

ai ele usou o console.log(aqui carregou); e isso aqui vemos no console do devtools.


Aula 3 : Declarando variáveis

var (nome da variavel) sexo = 'anal';

console.log(nome);

aqui está a variavel vai aparecer no console,  e se eu quiser saber o tipo dela mando um {console.log(nome, typeof nome)} dai no console e mostra não só o nome mais também o tipo da variavel.
as variaveis não tem tipagem forte ou seja você não precisa declarar o tipo dela quando vocẽ declara ela mais ainda assim é aconselhavel que sempre que você for fazer qualquer tratamento que você não altere o tipo de dado daquela variavel para evitar merda no futuro.

var idade = 25;
var peso = 100.0
var Picoroso = true;

aqui é o seguinte tanto numeros inteiros quanto ponto flutuante são considerados "number", e o tipos booleanos normal "true" ou "false".


Aula 4 : Declarando Arrays e Objetos

Array é um vetor , que basicamente é uma lista

var nomes = ['lucas', 'thomaiz', 'thanos'];

aqui é a declaração do array, só abrir os conchetes que ta tudo certo o que estiver dentro dos conchetes é parte do array, e para acessar os atributos do array é só mandar o array.(nome do atributo) nomes.[1], porque "1" porque no JS o array começa pelo 1 e não pelo "0"(zero.)


Objeto

var pessoa = {
	nome : 'lucas'
}

os objetos são diferentes pelo seguinte fato são "{}" (chaves) para abrir e não conchetes, e você coloca o nome do atributo ":" (dois pontos) o valor do atributo.
e para acessalo é igual nomeDoObjeto.nomeDoAtributo



var pessoa = {
	nome : 'lucas',
		amigos : [
		'lucas', 
		'thomaiz', 
		'thanos'
		]
}

e tem o mesmo principio que que seja exibido apenas um dos valores tem que ser passado um parâmeto.

console.log(pessoa.amigos[1]);



Aula 5 : Operadores aritméticos

var peso = 80;
var altura = 1.83;
var imc = peso /(altura * altura);

imc += 10;
imc -= 10;
imc++;
imc--;


console.log(imc);

Aula 6 : Estruturas Condicionais


if, else if, else

var bebeRefrigerante = false;
var bebeCerveja = false;
var bebeSucoNatural = false;

var convidado ={
	nome:'Lucas',
	idade: 25,
	bebeCerveja: true,
	bebeRefrigerante: false
}

if (convidado.bebeRefrigerante){
	comprarRefrigerante = true
} else if(convidado.bebeCerveja && convidado.iade >=18){
	comprarCerveja = true
} else{
	comprarSucoNatural = true
}

console.log(comprarRefrigerante)


apenas para testar a chave.


Aula 7 : Trabalhando com for

var convidados = [

{
nome: 'Pedro',
idade : 20,
bebeRefrigerante : false,
bebeCerveja : true
},
{
nome: 'Maria',
idade : 17,
bebeRefrigerante : true,
bebeCerveja : false
},
{
nome: 'João',
idade : 19,
bebeRefrigerante : true,
bebeCerveja : true
}
]

var comprarCerveja = false;


ai aqui ao invés de usar varios if's para validar se o cara bebe ou não para cada user ia dar bosta ou demorar muito dai usa-se o "for"

for(var i = 0; i < convidados.length; i++) {
console.log(convidados[i].nome, convidados[i].bebeCerveja);
	if (convidados[i].bebeCerveja){
		comprarCerveja = true
break
		}

}

console.log(comprarCerveja)

Aqui o resultado é uma lista com os nomes de todos os que ele passou e ainda com a info se ele bebe ou não, e no caso como tem um "break" ali no final do if ele vai parar assim que encontrar o 1 nego que bebe, isso meio que serve para saber se você vai ter que comprar breja e o quanto, e no "convidados.length" o "length" é um atributo padrão do JS que permite saber o tamanho das coisas, nesse casso do meu obejto.



Aula 8 : Estrutura de repetição com WHILE


var convidados = [

{
nome: 'Pedro',
idade : 20,
bebeRefrigerante : false,
bebeCerveja : false
},
{
nome: 'Maria',
idade : 17,
bebeRefrigerante : true,
bebeCerveja : false
},
{
nome: 'João',
idade : 19,
bebeRefrigerante : true,
bebeCerveja : true
}
]

var comprarCerveja = false;

var i=0;
while(i < convidados.length) {
console.log(convidados[i].nome, convidados[i].bebeCerveja);
	if (convidados[i].bebeCerveja){
		comprarCerveja = true
		break
		}
	i++
}

console.log(comprarCerveja)var convidados = [

{
nome: 'Pedro',
idade : 20,
bebeRefrigerante : false,
bebeCerveja : true
},
{
nome: 'Maria',
idade : 17,
bebeRefrigerante : true,
bebeCerveja : false
},
{
nome: 'João',
idade : 19,
bebeRefrigerante : true,
bebeCerveja : true
}
]

var comprarCerveja = false;

var i=0;
while(i < convidados.length) {
console.log(convidados[i].nome, convidados[i].bebeCerveja);
	if (convidados[i].bebeCerveja){
		comprarCerveja = true
		break
		}
	i++
}

console.log(comprarCerveja)



Aqui segue a mesma ideia, o while é basicamente um "for" com algumas particularidades, ali eu tive que declarar uma variavel inicial como 0(zero) e colocar na expressão que ele ia execultar até "i" ser maior ou igual a "convidados" e nos convidados usei o ".length" para descobrir o tamnho desse cara.


Aula 9 : Declaração de funções

function imc (altura, peso){
	return peso / (altura * altura)
}


var pessoas = [
{
	nome : 'pedro',
	altura : 1.83,
	peso : 80
},
{
	nome : 'maria',
	altura : 1.90,
	peso : 90
},
{
	nome : 'joão',
	altura : 2.00,
	peso : 100
}
]

for (var pessoa of pessoas) {
	//console.log(pessoa)	
	var resultado = imc (pessoa.altura, pessoa.peso)
	console.log(pessoa.nome, resultado)
}



Nesse caso aqui como funciona a parada, eu peguei aqui esse "of" no meio do meu "for" que é uma das formas de "for" e ai ele percorre o meu objeto, e atribui os valores de "pessoas" dentro da variavel "pessoa" e como tem um "for" ele vai printando a parada e já faz os calculos porque eu disse para fazer isso dentro do "for".




CURSO DE INTRODUÇÃO AO JAVASCRIPT


Aula 1 : Introdução

Introdução ao curso e ao JS, e mostrando que na real o JS é mais utilizado para manipular o HMTL e trazer interações com o usuario no site, faz validações antes de enviar realmente um requisição http etc.

ai ele ta mostrando que mesmo com uma tag <link> do html ele consegue mudar o comportamento e fazer com que esse link se torne um contador dinâmico.


Aula 2 : Manipulando Elementos da View

Aqui a parada foi simples os manos mostraram como usar o console para alterar a DOM(Document Object Model),e mostrou como usar o console para manipular as paradas.




Aula 3 : Executando código a partir de um arquivo

Nesse caso ele colocou referenciou o JS, no html usando "<sript src= ""></script>" que é uma tag utilizada para referenciar um arquivo dentro do outro, e deu a call de sempre colocar isso no final do seu código HTML, porque como o carregamento do HTML é sequencial e o código vai estar no final da pagina ele vai carregar a pagina todo e por ultimo ele vai carregar o JS.


Aula 4 : Entendendo um pouco sobre os tipos

Aqui ele mostrou que o valor que está no "input" é uma string, e que mesmo que tenha um numero la é uma sting, ai para podermos calcular precisamos antes fazer a conversão.

var input = document.getElementById("quantidade");
input.value = 1 + Number(input.value);
input.value++;

assim eu estou convertendo o valor do input para um numero.

e sempre que eu coloco o "++" o JS já tenta converter para numero.



Aula 5 : Capturando um evento de click

var input = document.getElementById("quantidade");
var botaoIncrementa = document.querySelector("#btn-incrementa");

botaoIncrementa.addEventListener('click', incrementa);

function incrementa()
{
	input.value++
}

aqui qual a fita, eu coloquei os "id" dentro das tags html, e no input foi o (id = "quantidade"), e no botão de mais foi "<a id ="btn-incrementa"), sendo assim quando eu vou buscar esses caras é igual no CSS, quando é "id" usa o "#" e quando é clase usa o ".", também usou um novo esquema que é o "addEventListener" que segundo a lenda eu colo isso para que o JS fique escutando um evento ou ação do usuario, e o "querySelector" pelo que eu intendi é para pegar o elemento HTML mesmo e trazer para o JS e ele sempre retorna o objeto, e o "getElemente" é tem a mesma função mais sem a ordenação de "ByID" ele não serve para nada.

