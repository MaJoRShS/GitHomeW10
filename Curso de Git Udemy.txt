so Git Udemy

Aula 1 : Introdução
Fala só dele mesmo

Aula 2 : Gerencia de Configuração de Software


Durante o desenvolvimento é necessario saber
 O que mudou e quando mudou?
 Porque mudou?
 Quem fez a mudança?
 Podemos reproduzir está mudança?

Identificação

Documentação

Controle

Auditoria


Artefatos

Código fonte

Documentação do Software

Manual do Usuario



Aula 3 : Controle de Versão

ele facilita fazendo merge das mudanças

Sw de controle de versão

SVN - subversion

Mercurial  - Ha

CVS - concurrent versioning system

Bazaar

Git



Aula 4 : Github e alternativas

O que é o Github

é um servidor de repositórios git, e o Git é o proprio sistema de gerenciamento de versão



Aula 5 : Ferramentas Git


baixe o git e instale

crie uma conta no github

verifique qual inteface grafica funciona melhor para você, tem uma lista de interfaces no proprio site do git.




Aula 6 : Chave SSH e documentação Git


seguir o passo a passo para criar uma chave SSH e conectar ela no seu GitHub, tem que importar a chave ssh public do git do pc para o github se não você não consegue conectar com seu repositório do github.
se usa o "ssh-keygen" que ele gera a chave publica , depois você utiliza "cat ~/.ssh/id_rsa.pub" que ele retorna o valor da chava composto do nome do PC ex :"(chav publica SSH)ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDaKAcJz4LRNJmv4sBMuRX34/tcqh4YxxIMNnEFYiasXqbkXspgkPDUhCI+kjAqmODJxaXzRWHluw0jxbq12fu7gi8Sd9XZgPF88ZpsrtsUHECT0x1aZQqbppkuVB13cImgMxLdtBoPmR+tc7O7Y9tBMUzJWiULmBaWuwYMuK4sZPnA6ZFw8G6a1XLsPyGF2MFrJtU1dO4a8tkiXMeAqgU0htP4WHKCDXwvuYOYxkAEL8W8YaaZCUGPrmENM2JD/7UDZ33zeFvqoBGoj076xbcHZaMUP6njnaMLAWLbYDd3wG426CfC+eWRY831za5ym5F82g7n2teEYtUItPUAWFX1 (nome do PC)Lucas@NOTE-GR5-02"


Aula 7 : Primeiros comandos Git

git (comando) help = Mostra o manual do comando

git init = inicia o repositório

git config --global user.name "(meu nome)"

git config --global user.email "(meu email)"

git add (nome do arquivo + extensão) 

git commit (envia o arquivo para o repositório git), em seguida abre um editor de texto para que você digite o que você fez nesse commit, como no meu ta com o "VI" 1º aperta o "i" que entra no modo de inserção digita o que você quer digitar e ai aperta "esc" que ele volta para os comandos do "VI" depois disso digita ":wq" serve para salvar o arquivo, ai pronto seu arquivo foi commitado.

git status = mostra o status atual do seu repositório

git log = mosta todos os log's de alteração



Aula : 8 Criando repositório no GitHub

Entra no GitHub e la cria um novo repositório, depois copia o que vai aparecer no segundo bloco que tem o titulo "…or push an existing repository from the command line" um comando de cada vez

git remote -v serve para você verificar os remotes que você já tem no seu repositório e ainda o que você pode fazer com ele , no caso 
"Lucas@NOTE-GR5-02 MINGW64 ~/Desktop/ShadowsCompany (master)
$ git remote -v
origin  git@github.com:MaJoRShS/CursoUdemy.git (fetch)
origin  git@github.com:MaJoRShS/CursoUdemy.git (push)
"

fetch = baixa as coisas do repositório
push =  envia as coisas para o repositório


sempre temos que configurar a branch do repositório ou seja a linha de desenvolvimento do repositório, e quando se usa o "git push"  a 1ª vez ele mostra como fazer para setar a branch master.

"git push --set-upstream origin master" =  Seta a branch master do repositório


Aula 9 : Editando o README.md

Esse arquivo é o tal do leia-me, na teoria eu devo colocar todas as recomendações e tudo que a de mais sagrado no meu codigo nesse cara aqui, da para inserir um titulo usando "#"  da para inserir imagens colocando "![caminho-da-imagem.extensão](comentario da imagem)".

ai depois usa o "git status" que ele vai mostrar tudo de novo que está na pasta e que aida não foi commitado, e ai para adicionar mais um arquivo para o meu repositório sem ter que dar "git add" em um por um eu uso o "git add ." que ele adiciona a minha fila de commit tudo que entrou novo no meu repositório.

git commit -m "O Texto que ia no commit" = Aqui é um atalho para commitar sem ter que entrar na tela do "VI" ou quer merda do tipo.


Aula 10 :Revisão dos comandos


git status = mostra o status do arquivo

git log = mostra o que já foi feito

git add "nome_do_arquivo.extensão"

git add .  = manda todos os arquivos de uma unica vez

git commit = insere uma descrição breve do que você fez

git commit -m "" = aqui ele não entra no modo de edilção e já coloca como descrição o que está dentro do "".

git push = sincroniza os arquivos nos repositorios.



Aula 11 : Estado dos Arquivos no Git

Não monitorado (untracked)

Modificado (modified)

Preparado (staged)

Consolidado (commited)


git diff = mostra diferenças entre commits e brands 



Aula 12 : Exercício de commit

Remover uma linha de um arquivo

Adicione uma nova linha no arquivo

Adicione um novo arquivo com pelo menos uma linha
 
Faça o commit e o push das alterações

Veja as diferenças do commit pelo GITHUB


Aula 13 : Comandos Clone e Pull

git clone = ele também inicia um repositório porem ele copia um repositorio para a nossa pasta

git pull = ele puxa todas as alterações do repositorios e só baixa os commits novos.


Aula 14 : Exercício de colaboração em repositórios

Aqui é importante configurar o cara como colaborador porque se não ele não consegue mandar "push" no seu repositorio.

Aula 15 : Navegando no histórico

git checkout = ele volta o arquivo ou o commit ou exatamente como ele era no momento que ele foi feito.

Ai você da um "git log" pego o código do commit e passa ele como parâmetro e ai o git vai mudar o estado do repositorio para igual estava naquele commit em especifico, isso siginifica que você pode até compilar novamente aquele arquivo, mais para altera-lo o git recomenda que você crie uma branch nova usando o "git checkout -b (nome da branch)", depois para retornar o repositorio para o estado atual da um "git checkout master". 


Aula 16 : Desfazendo com Checkout 

git checkout --(nome do arquivo) = aqui ele desfaz a minha alteração ou seja alterei coisa errada e quero desfazer uso isso e ele retorna para o estado antigo do arquivo.

git checkout HEAD --"nome do arquivo" = para quando eu já dei o add, no arquivo e quero retornalo para o estado antigo.

Aula 17 : Desfazendo com Revert e Reset

git revert "código do commit"= ele sempre vai ser o inverso de tudo que você fizer ou seja se você incluiu ele exclui, se commitou com 1 ele remove esse commit e deixa no estado antigo.

git reset HEAD~1 = aqui ele reseta mesmo o que foi feito(no cado aqui como eu passei "~1" ele vai voltar só um commit se eu passar "~2" ele volta dois commits e assim por diante), ou seja se você tiver feito 1 commit e colocar esse cara aqui ele reseta para o estado antigo o que você fez, porém se você ja tiver dado o "push" melhor não usalo.

git reset --hard = aqui ele apaga mesmo do historico o commit que você fez, no revert ele deixa la as alterações aqui não aqui ele remove até o historico da sua alteração.

Aula 18 : Conflitos

conflitos acontecem quando as alterações são feitas na mesma linha, ou seja eu alterei uma linha outra pessoa faz a mesma coisa, e como o git não sabe como resolver ele vai te avisar do que está acontecendo para que você resolva.

Aula 19 : Exercício de conflitos

 Tenho que criar um problema no repositório e depois corrigilo.

eu e o mano devemos alterar a mesma linha e ai depois eu devo corrigir o problema com o "git pull", entro no arquvio depois de usar o "git pull" e removo na mão mesmo o que estiver entre o sinal de "=" e deixo as alterações nas linhas certas (achei meio bosta mais ok), ai segue todos os passos para subir a alteração no repositório.

Aula 20 : Resolvendo conflitos com Merge

aqui ele fez a mesma merda da aula pasada, mais mostrou que depois de remover as linhas la, ele te deixa já com uma mensagem padrão de "merge", e que se eu usar o terminal "fish" também aparece uma mensagem depois do nome do repositorio.


Aula 21 : Visualizando o histórico em uma Interface Gráfica


Aqui ele mostrou como é o github e o git eye, é legal , deve facilitar muito a vida,mais ao mesmo tempo a vibe deve ser o terminal.


Seção: 4
Branching, Merge e Rebase


Aula 22 : Branching

Branching = Ramificações

git branch mostra o nome das branchis que tem no seu projeto, e o * antes do nome indica que você está nela.

git branch nomeDaBranch = isso serve para você criar uma nova branch no seu projeto.

o "git status" também mostra em qual branch você está.

git checkout nomeDaBranch = permite você mudar de uma branch para outra


Aula 23 : Exercício de Branch

Criar uma nova branch, fazer dois commits nela, e depois voltar para sua branch inicail(master) e fazer um novo commit na mesma linha e dar um push nas duas, assim termos dois arquivos diferentes um em cada branch.

e olhar no github essas mudanças.

Nova Branch criada e alterações feitas, to criando essa parada aqui apenas para fazer o que manda na aula.



Aula 23 : Exercício de Branchs

Nesse Arquivo estou dentro da branch outraBranch e estou alterando coisas apenas para verificar se as alterações ficam mesmo só nessa branch e se quando eu commitar não vai dar b.o no outro.
Aqui o segundo commit que foi proposto na aula, e essa parada ficou mesmo na branch master só tem coisa da branch master, e na branch outraBranch só coisas dessa branch o cuidado aqui é sempre commitar na branch certa.



Aula 24 : Git Merge e Exercício 


gitr merge <branch> = ele mescla as duas branchs

como que se usa você usa esse cara aqui para poder unir duas branchs, ou deixar uma delas com a info das duas, então quando se usa esse merge ele vai dar conflito, mais isso meio que não tem como fugir e ai depois de corrigir o conflito naquele gato monstro é só dar o push e olhar no github.




Aula 25 : Git Rebase

Esse cara aqui é utilizando quando não se quer que a no tenha aqueles montes de linhas de progresso no histórico.



Aula 26 : Exercício de Rebase

Nova Aula fazendo a parada do Rebase, aqui vou fazer o exercicio de rebase, e ver no que da.


Fazendo o exercicio de rebase.



Fazendo exercicio de REBASE

Nova Aula fazendo a parada do Rebase, aqui vou fazer o exercicio de rebase, e ver no que da.



Aula 27 : Git Fetch


quando se usa o "git pull" é quase a mesma coisa que fazer um fetch + merge.

mais ai primeiro se tem que dar um git fetch e ele vai apenas baixar as alterações e mesmo assim depois eu preciso dar um git rebase e ai nessa caso o histórico fica como se eu tivesse feito todos esses commits um após o outro.

Aula 28 : Tags

Serve como um marcador de versão ou release, e nesse caso elas não avançam a menos que você crie uma nova, ou seja quando se usa o "git tag nome_da_tag" ele vai e grava como versões.

Aula 28 : Introdução à aula

Falou nada e disse que vai falar de gihub.


Aula 29 : Interfaces Gráficas

geralmente se usa interfaces graficas para gerenciar muitos arquivos ao invés de ir pelo terminal, porque nelas da para copiar os arquivos para a area de transferencia e ai da para você fazer varios commits separados.

Aula 30 : Dando estrelas e seguindo no GitHub

Serve basicamente para verificar o que você ou as outras pessoas estão "curtindo" no momento.


Aula 31 : Dando estrelas e seguindo no GitHub

Esse cara serve apenas para que você siga as pessoas e as pessoas saibam quantas pessoas estão curtindo ou seguindo seus trabalhos.



Aula 32 : Fork e Issues

fork = é apenas copiar o repositorio para sua maquina e você pode trabalhar com ele.

Issues = é mais ou menos como uma questão, ou um abrir um ticket e sempre que tiver uma issues aberta se você der um commit #numero_da_issues ele encerra essa issues.

e para fechar pelo que eu intendi é só commitar em qualquer lugar de preferencia corrigindo ela mesmo e adicionando o "#numero_da_issues" e já era. 


Aula 33 : Pull Request e Workflow do GitHub

pelo que eu intendi é o seguinte, quando se ta trabalhando no projeto de alguém e ai você corrigiu algo e manda um "pull request" e ai o dono do repositório pode ou não aceitar minhas alterações e nesse caso eu também posso discutir com o dono e ai ele escolhe fazer ou não o merge das minhas alterações.

esse esquema do workflow do git meio que mostra mais ou menos o fluxo que acontece no pull request.


Aula 34 : Projeto Final do Curso

Aqui tinha que clonar o repositório do curso e depois adicionar o arquivo com as minhas identificações, e enviar para o github.



Aula 35 :  Verificando e aceitando Pull Request

Aqui tem um comando via terminal mais é bem mais facil fazer pelo github.

git fetch origin pull/ID/head:BRANCH aqui o id é o id do pull request e o nome que se da para a branch é o que você quiser.



Aula 36 : Caso de Exemplo em Open Source

Aqui ele conta uma historinha de como ele e um mano tocaram um projetinho que nem era deles.



Aula 37 : Git Ignore

git inore é um arquivo de configuração do git que simplesmente faz com que alguns arquivos / diretórios que você colocar la sejam ignorados pelo commit, ou seja eles não seram rastreados pelo git por isso de git ignore.

é só colocar o nome do arquivo ou do repositório e até mesmo colocar todos os tipo de um determinado arquivo.

ex : **/*.css ignora todos os arquivos .css
	sexo/ ignora essa pasta


Aula 38 : Commit Amend

Esse cara altera o ultimo commit, vamos supor que você commitou uma parada e tinha mais coisa, ai você da um git commit --amend e ai ele vai abrir o seu ultimo commit para que você altere. (detalhe ele ainda não tinha dado o push.)


Aula 39 : Stash

Aqui ele guarda suas alterações porém sem a necessidade de um commit, então como funciona, quando você altera muitas coisas e tenta mudar de branchs gertalmente da pau, ai o que você faz, da um "git stash" que ele cria um lugar meio que alternativo para aquela mudança, e ai para ver as mudanças é so mandar um "git stash list" que ele mostra a sua alteração mais se você commitar não da nada, e para voltar para onde você estava é só mandar um "git stash pop".


Aula 40 :  Cherrypick e Blame

git cherry-pick = ele recommita algum commit antigo seu, para que aqui surta efeito em todos os seus commits posteriores, então você manda um "git cherry-pick BranchLucas~2" aqui eu passei o nome da branch que eu quero alterar o commit e ainda o numero de commits que eu quero voltar no caso 2.

Git Blame : Mostra todos os commits que foram feitos linha a linha e quem fez aquele commit.


Aula 41 : Git Bisect


Serve para você identificar quem ou qual commit fez uma alteração que está errada, e ai ele te ajuda a voltar o seu arquivo ou repositório para aquele estado.


Aula 42 : GitHub Pages


Aqui você entra no github e cria uma pagina para o seu repositório, ai ao invés de você mandar para as pessoas o link do github e entrar naquela tela feinha do github você cria uma toda personalizada e cheia de frescura e pronto.



Aula 43 : Github Milestones

É uma pegada meio que trello , você cria uma milestone e coloca uma data final para ela, ai o que você faz, vai criando issues dentro dessa milestone e conforme elas vão sendo concluidas ele vai mudando o progresso e vai indo completando o sucesso.


Aula 44 : Webhooks e Serviços


Integração com outros sites e sistemas , pelo que eu intendi é mieo que para ajudar nos testes e para todos os contribuintes saberem os resultados e como está os testes.


Aula 45 : GitKraken GUI


É uma interface nova para ver o progresso do seu repósitório.


