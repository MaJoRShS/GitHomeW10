Seção: 1

Introdução
Aula 1 : Introdução: visão geral do curso

Falou como que vai ser o curso, parece que vai ter muito conteúdo pratico e parece ser bem didatico e bem voltado para o mercado de trabalho porque ele usa git e github e ainda tem todas as modelagens de dados.

Seção: 2

Apresentação da linguagem Java e tópicos básicos

Aula 2 : Visão geral do capítulo 2

Explicou de novo como vai ser o curso e ja deixa a aula 3 como sendo apenas para baixar o material do curso.

Aula 3 : Material de apoio do capítulo

Baixei o material do curso.

Aula 4 : Nota de atualização

Explicou que o JAVA ta na versão 11, e que apartir daqui ele se tornou pago, e quando eu encontrar JAVA em empresas vou encontra ou o JAVA 11 ou o JAVA 8.

Aula 5 : Contextualização Parte 1: histórico e edições

O Java é uma linguagem de programação mais também é uma ambiente de desenvolvimento e de execução, ou seja para codar em java você precisa não só saber a syntax e estrutura da linguagem mais também precisa do ambiente de desenvolvimento JAVA, além disso para que você consiga rodar um programa em JAVA você precisa do ambiente de execução do JAVA instalado e configurado na maquina ou onde você for rodar esse programa.

Ainda ta na história do JAVA e explicando um pouco sobre as versões e tipos de JAVA.


Aula 6 : Contextualização Parte 2: JRE, JDK, bytecodes e máquina virtual

Aqui ele explica mais ou menos a parada do JDK, JRE e serverJRE.


JRE - Java Runtime Environment 
Aqui é necessario apenas para usuarios finais poderem rodar os apps java que foram desenvolvidos.


Server JRE - Java Runtime Environment 
É a mesma coisa do de cima só que ele é voltado para aplicações que rodam em servidores.


JDK - Java Development KIT
É para quem vai desenvolver com java, aqui tem tudo que é necessario para um desenvolvedor JAVA poder trabalhar.


E aqui ele ainda mostra o porque java é ou foi um sucesso, porque geralmente as linguagens que são compiladas tendem a ser mais rapidas porque elas são compiladas para aquele S.O expecifico, o que faz com que ele seja um programa de execução mais rapida, porém geralmente você precisará modificar o seu código quando você for criar a versão para um S.O diferente.

Já as linguagens interpretadas, é mais simples porque o interpretador já existe em cada um dos S.O sendo assim você escreve uma unica vez e o interpretador de cada S.O faz o resto para você, porém o problema disso é que a interpretação é feita na hora do carregamento da aplicação o que gera uma certa lentidão em comparação com as aplicações compiladas e um dos problemas com linguagens interpretadas é que geralmente elas tem uma tipagem fraca, o que pode causar erros na aplicação.

Já o Java é meio a meio, ele é pré processado, é gerado um bytecode, que é em uma linguagem de mais baixo nivel e que já foi feita a validação de tipagem e ai o bytecode é interpretado pela JVM de cada S.O, fazendo com que o programa tenha a garantia de ser validado e compilado, e ainda é interpretado.


Aula 7 : Estrutura de uma Aplicação Java

O java é uma linguagem que é basicamente estruturada em classes, ou seja todo código java está dentro de uma class ou de varias classes,  e essas classes podem ser agrupadas logicamente em pacotes(packages), onde eu posso organizar as minhas classes e todas as susas dependencias.

Depois do Java 9 podemos agrupar pacotes em grupos e que são chamados de modulos, e ai cada modulo pode conter todos os pacotes referentes a uma aplicação ou serviço expecifico.

Tudo isso é em um nivel logico, ou seja é feito apenas em regra de negocio ou na forma como está sendo codificado, e quando isso é compilado para ser enviado para um servidor de aplicação é feito ai sim o agrupamento Fisico, quando é gerado o build ou runtime.

Aplicação é composta por varios modulos relacionados.


Aula 8 : Aviso sobre sistemas x86 (32 bits)

Aqui ele explica que o JDK só pode ser instalado a versão 11 se o seu sistema for x64, porque os sistemas x32, não tem suporte ainda para o java 11, então é necessario instalar o java 8.


Aula 9 : Instalação do JDK e Eclipse no Windows

Aqui ele simplimente mostou como instalar o JAVA e o Eclipse no Windows.


Aula 10 : Primeiro programa em Java no Eclipse

A principio ele mostrou como criar um projeto com o eclipse e como fica a estrutura de pastas dentro do projeto, ele ainda mostrou um app basico em java que printa algo na tela, e ainda esplicou que com o Ctlr + Shift + F você indenta o código no eclipse.


Aula 11 : Tipos primitivos em Java

		boolean completed = false;
		char gender = 'F';
		char letter = '\u0041';
		byte n1 = 126;
		int n2 = 1000;
		int n3 = 2147483647;
		long n4 = 2147483648L;
		float n5 = 4.5f;
		double n6 = 4.5;

O tipo char aceita tanto o caracter propriamente dito quanto o seu referencial em unicode.

Os tipos numericos tem limite de tamanho, o bute só vai de -127 até 126.

O int vai de -2147483648 até 2147483647.

O long é maior que o int e precisa ser referenciado com um "L" maiusculo no final da declaração do valor.

O float precisa também da mesma referencia do final com um "f" minusculo para que o sistema entenda que ele é um float e não um double, e ele é de ponto flutuante ou seja aceita valore de moedas e de milhar.

O double é só declarar e já era.


Os elementos do tipo String são um conjunto de caractéres, normal igual qualquer outro.

ai tem os tipos "Object" que pelo que eu intendi toda string é filha de um Object que é um objeto generico, e aceita qualquer tipo primitivo a ser referenciado nele.


Aula 12 : Restrições e convenções para nomes

Não pode começar com dígito: use uma letra ou _
Não usar acentos ou til
Não pode ter espaço em branco
Sugestão: use nomes que tenham um significado


convenções

Camel Case: lastName
pacotes
atributos
métodos
variáveis e parâmetros
Pascal Case: ProductService
classes


Aula 13 : Conversão implícita e casting

Casting é quando eu quero transformar a variavel de destino no mesmo tipo da de saida, por exemplo eu tenho um double a, e quero jogar o valor de a em b, mais b é int, isso resultaria em perca de informação, e posivel erro de compilação, então para que o java me permita fazer isso sem dar erro eu posso colocar assim.


double a;
float b;
a = 5.0;
b = (float)a;
System.out.println(b);


declaro que o b vai se transformar em double para receber o valor de a.

Perca de informação é mais ou menos esse caso aqui 

double a;
int b;
a = 5.0;
b = (int)a;
System.out.println(b);

aqui eu tenho um double e to mandando ele para uma int o que vai fazer com que ele não mostre as casas decimais ou faça um "arredendamento".



já a Conversão implícita é quando eu to convertendo tipos primitivos basicos para tipos mais complexos

int a, b;
double result;
a = 5;
b = 2;
result = (double) a / b;
System.out.println(result);

aqui o resultado é um double porque vai dar "2.5" logo virou um double.


e para conversões de tipos existem alguns converores nativos por exemplo quero converter uma string para um int


int a, b;
double result;
String s = "33";


a.Integer.parseInt(s);

result.Double.parseDouble(s);

System.out.println(a);
System.out.println(s);


Aula 14 : Saída de dados em Java


Imprimir na saída padrão (console)
Comandos
System.out.println = imprime com quebra de linha.
System.out.print   = imprime tudo na mesma linha.
System.out.printf  = imprime valores como ponto flutuante.


%d	representa números inteiros
%f	representa números floats
%2f	representa números doubles
%b	representa valores booleanos
%c	representa valores char


Nos flutuantes o esquema das casas decimais é só colocar a quantidade de casas que se quer apresentar assim %.2f, assim eu apresento duas casas decimais depois da virgula ou ponto.

e também para setar uma localização especifica é utlizado a lib import "java.util.Locale;" e se declara assim "Locale.setDefault(Locale.US);" antes de onde se quer formatar.



Aula 15 : Operadores aritméticos


Operador Significado
+        adição
-        subtração
*        multiplicação
/        divisão
%        resto da divisão



    int n1 = 3 + 4 * 2;
    int n2 = (3+4)*2;
    int n3 = 17 % 3;
    double n4 = 10.0 / 8.0;
    
    System.out.printf("%d %d  %d  %.2f" ,n1 , n2, n3, n4);


Aqui tem um pequeno macete, para não ter que colocar antes da expressão que é um double, é só colocar o valor com .alguma coisa, por exemplo "10.0".

Formula de Baskara

double a = 1.0, b = -3.0, c = -4.0;
double x1 = (-b + Math.sqrt(b * b - 4 * a * c)) / (2 * a);

esse "Math.sqrt()" pelo que eu intendi é o esquema para fazer a raiz quadrada.

tem que dar 4.0


Aula 16 : Operadores de atribuição

Operador    Exemplo     Significado
=           a = 10;     a RECEBE 10
+=          a += 2;     a RECEBE a + 2;
-=          a -= 2;     a RECEBE a - 2;
*=          a *= 2;     a RECEBE a * 2;
/=          a /= 2;     a RECEBE a / 2;
%=          a %= 3;     a RECEBE a % 3;

Aqui é normal igual as outras linguagens

Operador     Exemplo          Significado
++           a++; ou ++a;     a = a + 1;
--           a--; ou --a;     a = a - 1;

Aqui tem uma certa diferença eu achoque se eu colocar o "a++;"  ele vai fazer a iteração no valor do e se eu colocar o "++a;" ele vai iterar primeiro o valor e depois ele vai adicionar esse valor a "a";



int a = 10;
int b = ++a;

System.out.println(a);
System.out.println(b);

Resultado a = 11
          b = 11



int a = 10;
int b = a++;

System.out.println(a);
System.out.println(b);

Resultado a = 11
          b = 10


mais ou menos assim, se o "a" tiver antes ele atribui o valor de "a" a variavel "b" e depois incrementa a variavel "a", e se for ao contrario ele incrementa a variavel "a" e depois ele joga o valor de "a" em "b".


Aula 17 : Entrada de dados em Java - Parte 1

package course;

import java.util.Locale;
import java.util.Scanner;



public class Program {

	public static void main(String[] args) {
		
		Scanner sc = new Scanner(System.in);
		
		System.out.print("Please tell me what you want :");
		String sentence = sc.nextLine();
		
		System.out.println("good choice " + sentence + " is DELICIUS");
		
		
		System.out.println("say something I break into words ");
		String a,b,c,d;
		a = sc.next();
		b = sc.next();
		c = sc.next();
		d = sc.next();
		
		System.out.println(a);
		System.out.println(b);
		System.out.println(c);
		System.out.println(d);

		
		sc.close();
	}

}

Nesse cara aqui eu to trabalhando com captura de informação digitada, e para isso eu uso a lib "Scanner" e ela pega basicamente tudo que é digitado, eu tenho que falar para ela qual é o tipo de dado que vai ser inputado(o que na minha humilde opniao é bom e ruim ao mesmo tempo).

ai o que eu fiz, criei uma variavel chamada "sentence" que pegou o que foi digitado, mesmo se for frase ele pega tudo e armazena na minha variavel, ai eu printei na tela o que foi digitado, na real ainda coloquei um textinho para dar uma embelezada na parada.

depois disso o que eu fiz, eu peguei basicamente o que foi digitado e quebrei todas as palavras limitando até 4 palavras e joguei cada uma delas e uma variavel, e depois eu printo cada uma delas.

e o "sc.close();" fecha a utilização do meu "Scanner".


Aula 18 : Entrada de dados em Java - Parte 2


package course;

import java.util.Locale;
import java.util.Scanner;


public class Program {

	public static void main(String[] args) {
		
		Scanner sc = new Scanner(System.in);
		
		int n1 = sc.nextInt();
		sc.nextLine();
		String name = sc.nextLine();
		char gender = sc.next().charAt(0);
		
		String s = sc.next();
		char letter = s.charAt(0);
		int digit = Integer.parseInt(s.substring(1));	
		
		
		System.out.println(n1);
		System.out.println(name);
		System.out.println(gender);
		System.out.println(letter);
		System.out.println(digit);
		sc.close();
	}

}


Nesse caso o primeiro que estamos fazendo é pegando um valor inteiro e printando ele na tela, porém aqui tem uma macete, como depois de você digitar o inteiro ele já tem um outro "nextLine();" esse cara acha que quando você deu enter na linha de cima você já executou ele, e na verdade você não quer isso , por isso tem um "nextLine();" vazio entre os dois, para evitar que o programa seja encerrado antecipadamente.
		
		int n1 = sc.nextInt();
		sc.nextLine();
		String name = sc.nextLine();


continuando jogo um valor alfa numerico em uma variavel no meu exemplo "b5" e quebro ela em duas variaveis diferente, eu depois pego apenas o 1º caracter que foi digitado independente de quantos forem digitados eu vou pegar apenas o 1º usando o "charAt();" , e depois eu pego o numero para jogar em outra variavel, mais como era uma "string" e eu vou transformala em "int" eu preciso usar aquele esquema do "Integer.parseInt(s.substring(1));" aqui eu converto para inteirto apenas a o que está na posição 1 da minha string para inteiro.


package course;

import java.util.Locale;
import java.util.Scanner;

public class Program {

	public static void main(String[] args) {
		
		Locale.setDefault(Locale.US);
		Scanner sc = new Scanner(System.in);

		System.out.println("Enter your full name: ");
		String name = sc.nextLine();
		System.out.println("How many bedrooms are there in your house? ");
		int badroom = sc.nextInt();
		System.out.println("Enter product price: ");
		double price = sc.nextDouble();
		System.out.println("Enter your last name, age and height (same line): ");
		String lastName = sc.next();
		int age = sc.nextInt();
		double height = sc.nextDouble();
		
		
		System.out.println(name);
		System.out.println(badroom);
		System.out.printf("%.2f%n",price);
		System.out.println(lastName);
		System.out.println(age);
		System.out.println(height);
		
		sc.close();
	}

}


Nesse caso aqui é um exercicio proposto, eu tinha que fazer com que algumas info fossem printadas na tela e com que a apresentação delas fosse formatada e apresentada de uma determinada forma, apenas para treinamento e fixação.


Aula 19 : AVISO: exercícios para iniciantes PARTE 1

apenas o mano falando que eu tenho que fazer alguns exercicios mais que é opcional.

Aula 20 : Exercícios para Iniciantes - PARTE 1

Não tem aula, só uma conteudo em texto mesmo.


Exercicios feitos por mim.


package course;

import java.util.Locale;
import java.util.Scanner;

public class Program {

	public static void main(String[] args) {
		
		Locale.setDefault(Locale.US);
		Scanner sc = new Scanner(System.in);

		//SOMA
		System.out.println("Entrada =");
		int valor1 = sc.nextInt();
		int valor2 = sc.nextInt();
		int result = valor1 + valor2;
		System.out.println("Saida =" + result);

		//Subtração
		System.out.println("Entrada = ");
		int valor1 = sc.nextInt();
		int valor2 = sc.nextInt();
		int result = valor1 + valor2;
		System.out.printf("Saida = %d",result);
		

		//Area do Circulo
		System.out.println("Digite o valor para a Area : ");
		double raio =sc.nextDouble();		
		double pi = 3.14159;
		double area = (raio * raio) * pi;
		System.out.printf("%.4f",area);
		
		
		//Diferença
		System.out.println("Digite 4 Valores inteiros :");
	
		int a = sc.nextInt();
		int b = sc.nextInt();
		int c = sc.nextInt();
		int d = sc.nextInt();
		
		int result = (a * b)-(c * d);
		System.out.println(result);
		
		
		//Salario 
		System.out.println("Digite o numero do Usuario : ");
		int usu = sc.nextInt();
		System.out.println("Digite a quantidade de horas trabalhadas : ");
		double horas = sc.nextDouble();
		System.out.println("Digite o valor da hora de trabalho : ");
		double valor = sc.nextDouble();
		
		
		System.out.printf("Number :%d%n", usu);
		double result = valor * horas;
		System.out.printf("SALARY : U$ %.2f", result);
		
		
		
		
		//Calculo de Valor de produtos
		//Produto 1
		System.out.println("Digite o Código do produto 1 : ");
		int produto = sc.nextInt();
		System.out.println("Digite a quantidade de produtos : ");
		int qtd = sc.nextInt();
		System.out.println("Digite o valor unitario de cada produto : ");
		double valor = sc.nextDouble();
		double calc = valor * qtd;
		
		//Produto 2
		System.out.println("Digite o Código do produto 2 : ");
		int produto1 = sc.nextInt();
		System.out.println("Digite a quantidade de produtos : ");
		int qtd1 = sc.nextInt();
		System.out.println("Digite o valor unitario de cada produto : ");
		double valor1 = sc.nextDouble();
		double calc1 = valor1 * qtd1;
		double rest = calc + calc1;

		
		System.out.printf("Valor a pagar : R$ %.2f", rest);
	

		
		// TRIANGULO,CIRCULO,TRAPEZIO,QUADRADO,RETANGULO
		
		System.out.println("Digite 3 valores para o calculo de TRIANGULO,CIRCULO,TRAPEZIO,QUADRADO,RETANGULO ");
		double a = sc.nextDouble();
		double b = sc.nextDouble();
		double c = sc.nextDouble();
		
		
		// Triangulo
		double triangulo = (a * c) / 2;
		System.out.printf("TRIANGULO : %.3f %n", triangulo);
		
		//Area do circulo
		double pi = 3.14159;
		double area = c * c * pi;  
		System.out.printf("CIRCULO: : %.3f%n", area);
		
		//Trapézio
		double trapezio = (b + a) * c / 2;
		System.out.printf("TRAPEZIO: : %.3f%n", trapezio);
		
		
		//QUADRADO
		double lado = b * b;
		System.out.printf("QUADRADO: : %.3f%n", lado);
		
		
		//RETANGULO
		double ret = a*b;
		System.out.printf("RETANGULO: : %.3f%n", ret);
				
		
		
		sc.close();
	}

}

Aula 21 : Operadores comparativos

Operador    Significado
> 			maior
< 			menor
>= 			maior ou igual
<= 			menor ou igual
== 			igual
!= 			diferente


int a = 10;
boolean c1 = a < 10;
boolean c2 = a < 20;
boolean c3 = a > 10;
boolean c4 = a > 5;
System.out.println(c1);
System.out.println(c2);
System.out.println(c3);
System.out.println(c4);
System.out.println("------------");
boolean c5 = a <= 10;
boolean c6 = a >= 10;
boolean c7 = a == 10;
boolean c8 = a != 10;
System.out.println(c5);
System.out.println(c6);
System.out.println(c7);
System.out.println(c8);

Basicamente ele testou todas as possibilidades com a mesma variavel, ou seja testou se era igual, maior, menor, ou diferente.



Aula 22 : Operadores lógicos

Operador	 Significado
&& 			 E
||  		 OU
! 			 NÃO


primeiro vem o não(!), depois o e(&&) e por ultimo o ou(||)

boolean c1 = 2 > 3 || 4 != 5; // true
boolean c2 = !(2>3) && 4 != 5; // true
System.out.println(c1);
System.out.println(c2);
System.out.println("--------------");
boolean c3 = 10 < 5; // false
boolean c4 = c1 || c2 && c3; // true
System.out.println(c4);


fez a mesma coisa da aula passada, porém com alguns exemplos da tabela verdade e mostrando que no java a existe precedencia de operadores e não apenas na declaração por exemplo a negação sempre vai ser 1º e depois o and e por ultimo o or.


Aula 23 : Operadores bitwise


Operador 		Significado
& 				Operação "E" bit a bit
| 				Operação "OU" bit a bit
^ 				Operação "OU-exclusivo" bit a bit


int n1 = 89;
int n2 = 60;
System.out.println(n1 & n2);
System.out.println(n1 | n2);
System.out.println(n1 ^ n2);


Basicamente essa parada aqui é usada em micro controladores e em arduino, essa parada é em nivel binario, então aqui eu faço uma comparação em nivel binario bit a bit no valor que foi inputado ou pré cadastrado, respeitando as regras de e (&) , ou (|) e XOR (^).


Aula 24 : Estruturas Condicionais

System.out.println("Digite os valores de entrada :");
		int a = sc.nextInt();
		int b = sc.nextInt();
		int c = sc.nextInt();
		
		if (a > b && a > c) {
			System.out.printf("Higher =%d", a);
		}else if(b > c) {
			System.out.printf("Higher =%d", b);
		}else {
			System.out.printf("Higher =%d", c);
		}


Aqui eu faço uma validação simples de qual numero é o maior dentre 3 numeros.

Aula 25 : AVISO: exercícios para iniciantes PARTE 2

Aviso que tinha exercicios.

Aula 26 : Exercícios para Iniciantes - PARTE 2

ainda vou fazer são 8 exercicios.


package basic;

import java.util.Locale;
import java.util.Scanner;

public class basic {

	public static void main(String[] args) {
		
		Locale.setDefault(Locale.US);
		Scanner sc = new Scanner(System.in);
		
		//Negativo ou não
//		System.out.println("Digite o Valor a Ser Verificado : ");
//		int verify = sc.nextInt();
//		
//		if(verify >= 0) {
//			System.out.println("NAO NEGATIVO ");
//		}else {
//			System.out.println("NEGATIVO ");
//		}
		
		
		//Par ou Impar
//		System.out.println("Digite um numero para a verificação : ");
//		int num = sc.nextInt();
//		if (num % 2 == 0) {
//			System.out.println("Numero PAR ");
//		}else {
//			System.out.println("Numero IMPAR");
//		}
		

		
		
		//Multiplos
//		System.out.println("Digite dois valores em ordem Crescente ou Decrescente :");
//		
//		int A = sc.nextInt();
//		int B = sc.nextInt();
//		
//		if(A % B == 0 || B % A == 0) {
//			System.out.println("Sao Multiplos ");
//		}else {
//			System.out.println("Nao sao Multiplos ");
//		}
		

		//Duração do Jogo
//		System.out.println("Digite os horarios de inicio e termino do JOGO :");
//		int horaInicial = sc.nextInt();
//		int horaFinal = sc.nextInt();
//		
//
//		int duracao;
//		if (horaInicial < horaFinal) {
//			duracao = horaFinal - horaInicial;
//		}
//		else {
//			duracao = 24 - horaInicial + horaFinal;
//		}
//		
//		System.out.println("O JOGO DUROU " + duracao + " HORA(S)");
		//Esse aqui eu não tinha pensado desta forma, ficou bem mais simples e resumindo, eu peguei o que ele resolveu mesmo.
		
		
		
		//Calcular valor
//		System.out.println("Digite o código do produto que você deseja ");
//		
//		int cod = sc.nextInt();
//		int qtd = sc.nextInt();
//		
//		double total;
//		
//		if(cod == 1) {
//			total = qtd * 4.00;
//			System.out.printf("Total: R$ %.2f",total);
//		}else if(cod == 2) {
//			total = qtd * 4.50;
//			System.out.printf("Total: R$ %.2f",total);
//		}else if(cod == 3) {
//			total = qtd * 5.00;
//			System.out.printf("Total: R$ %.2f",total);
//		}else if(cod == 4) {
//			total = qtd * 2.00;
//			System.out.printf("Total: R$ %.2f",total);
//		}else if(cod == 5) {
//			total = qtd * 1.50;
//			System.out.printf("Total: R$ %.2f",total);
//		}
		
		
		
		//Intervalo
//		System.out.println("Digite um valor para ser verificado :");
//		double numero = sc.nextDouble();
//		
//		if (numero < 0.0 || numero > 100.0) {
//			System.out.println("Fora de intervalo");
//		}
//		else if (numero <= 25.0) {
//			System.out.println("Intervalo [0,25]");
//		}
//		else if (numero <= 50.0) {
//			System.out.println("Intervalo (25,50]");
//		}
//		else if (numero <= 75.0) {
//			System.out.println("Intervalo (50,75]");
//		}		
//		else {
//			System.out.println("Intervalo (75,100]");
//		}
//Aqui eu peguei de novo o código dele porque eu não estava conseguindo fazer o range de fora e ai eu peguei o esquema dele no git e vi que o meu tava certo mais o do cara esta melhor pensado.
		
		
		
		
		
		
		//Eixos
//		System.out.println("Digite os valores do eixo X e Y nessa ordem.");
//		double x = sc.nextDouble();
//		double y = sc.nextDouble();
//		
//		if (x == 0.0 && y == 0.0) {
//			System.out.println("Origem");
//		}
//		else if (x == 0.0) {
//			System.out.println("Eixo Y");
//		}
//		else if (y == 0.0) {
//			System.out.println("Eixo X");
//		}
//		else if (x > 0.0 && y > 0.0) {
//			System.out.println("Q1");
//		}
//		else if (x < 0.0 && y > 0.0) {
//			System.out.println("Q2");
//		}
//		else if (x < 0.0 && y < 0.0) {
//			System.out.println("Q3");
//		}
//		else {
//			System.out.println("Q4");
//		}
		
		
//Mais uma vez eu peguei o esquema dele, acho que preciso ou dormir melhor ou melhorar minha logica e tentar usar melhor minha cabeça, porque eu só me liguei em como fazer ou como ele tinha feito depois de ver o código dele, e na real é até simples, ele vai por exclusão e ai acaba sendo poucas validações.
			
		

//Imposto de Renda
//		double salario = sc.nextDouble();
//		
//		double imposto;
//		if (salario <= 2000.0) {
//			imposto = 0.0;
//		}
//		else if (salario <= 3000.0) {
//			imposto = (salario - 2000.0) * 0.08;
//		}
//		else if (salario <= 4500.0) {
//			imposto = (salario - 3000.0) * 0.18 + 1000.0 * 0.08;
//		}
//		else {
//			imposto = (salario - 4500.0) * 0.28 + 1500.0 * 0.18 + 1000.0 * 0.08;
//		}
//
//		if (imposto == 0.0) {
//			System.out.println("Isento");
//		}
//		else {
//			System.out.printf("R$ %.2f%n", imposto);
//		}
		
		//Esse aqui eu nem peguei a conta, não intendi o porque de tanta conta com valores que eu ultrapassei, se essa é a conta real do IR que lixo mano, e peguei mesmo dele de novo.
		

		sc.close();
		
	}
}



Aula 27 : Funções interessantes para String

package basic;

import java.util.Locale;
import java.util.Scanner;

public class basic {

	public static void main(String[] args) {
		
		Locale.setDefault(Locale.US);
		Scanner sc = new Scanner(System.in);
		
		//Manipulando Strings	
		
		
		String s = "Irineu o que comeu in ?         ";
		
		String s01 = s.toLowerCase();
		//Deixa tudo maiusculo
		
		String s02 = s.toUpperCase();
		//Deixa tudo minusculo
		
		String s03 = s.trim();
		//Remove todos os espaços do final da string
		
		String s04 = s.substring(3);
		//Substitui na string da posição 1 até o valor informado
		
		String s05 = s.substring(3, 6);
		//Apresenta apenas o range entre os valores informados
		
		String s06 = s.replace('I', 'g');
		//Substitui todas as ocorrencias do primeiro parâmetro pelo segundo
		
		String s07 = s.replace("eu", "fh");
		//Faz a mesma coisa do de cima porém para mudar um conjunto de caractéres é necessario usar aspas duplas.
		
		
		int i = s.indexOf("in");
		//Aqui ele procura a primeira ocorrencia do valor que foi passado e devolve a posição dele
		
		int j = s.lastIndexOf("in");
		//Aqui ele procura a ultima ocorrencia do valor que foi passado e devolve a posição dele

		
		
		System.out.println("Original: -" + s + "-");
		System.out.println("toLowerCase: -" + s01 + "-");
		System.out.println("toUpperCase: -" + s02 + "-");
		System.out.println("trim: -" + s03 + "-");
		System.out.println("substring(2): -" + s04 + "-");
		System.out.println("substring(2, 9): -" + s05 + "-");
		System.out.println("replace('a', 'x'): -" + s06 + "-");
		System.out.println("replace('abc', 'xy'): -" + s07 + "-");
		System.out.println("Index of 'bc': " + i);
		System.out.println("Last index of 'bc': " + j);
		
		
		
		
		sc.close();
		
	}
}




Operação split

String s = "Irineu o que comeu in ?         ";

		String[] vect = s.split(" ");
		String word1 = vect[0];
		String word2 = vect[1];
		String word3 = vect[2];
		String word4 = vect[3];
		String word5 = vect[4];
		
		
		System.out.println(word1);
		System.out.println(word2);
		System.out.println(word3);
		System.out.println(word4);
		System.out.println(word5);

aqui eu defino que vai ser um vetor, e que eu quero pegar como separador que eu passo ali como parâmetro, que nesse caso é um espaço em branco mais pode ser qualquer coisa.mais pode ser qualquer coisa, dai ele usa o seu separador para quebrar a string em variaveis e para acessa-las é normal, igual array.


Aula 28 : Sintaxe alternativa - switch-case

package basic;

import java.util.Locale;
import java.util.Scanner;

public class basic {

	public static void main(String[] args) {

		Locale.setDefault(Locale.US);
		Scanner sc = new Scanner(System.in);

		int x = sc.nextInt();
		String day;
		switch (x) {
		case 1:
			day = "Sunday";
			break;
		case 2:
			day = "Monday";
			break;
		case 3:
			day = "Tuesday";
			break;
		case 4:
			day = "Wednesday";
			break;
		case 5:
			day = "Thursday";
			break;
		case 6:
			day = "Friday";
			break;
		case 7:
			day = "Saturday";
			break;
		default:
			day = "Invalid value";
		}
		System.out.println("Day: " + day);

		sc.close();

	}
}


Aqui é basicamente uma alternativa ai if else, para não ficar com aquela estrutura encadeada mostrona se usa o switch, que é a mesma coisa mais ainda assim você vai ter que escrever tudo mais é um pouco mais facil.


Aula 29 : Expressão condicional ternária

syntax
( condição ) ? valor_se_verdadeiro : valor_se_falso


    double preco = 34.5;
    double desconto;
    if (preco < 20.0) {
        desconto = preco * 0.1;
    }
    else {
        desconto = preco * 0.05;
    }

Forma normal e mais comum de se codar


    double preco = 34.5;
    double desconto = (preco < 20.0) ? preco * 0.1 : preco * 0.05;

expressão ternária que é o if else bem mais simples e na mesma linha.


Aqui eu achei top mano, porque aqui eu to usando o if else sem estar usando o if else e escreve bem menos, claro que com os snippets é bem easy escrever if else, mais é uma execelente opção.


Aula 30 : Escopo e inicialização

inicialização é quando eu preciso fazer com que uma varial ou tenho um valor pré-fixado, ou fazer ela receber um valor que o usuario vai digitar, e se eu não fizer isso basicamente vai dar erro de compilação, porque eu não posso criar uma variavel e não instaciar ela e nem atribuir valor a ela.


E o esquema de escopo é pior em java porque aqui toda estrutura de repetição (if else, switch e etc) tem um escopo proprio, ou seja se você criar uma variavel dentro de uma dessas estruturas você só vai conseguir printar ela na tela se ela for um retorno dentro da propria estrutura, por que ela só existe dentro do escopo da estrutura, para poder acessar e printar ela de qualquer lugar é necessario que você crie ela fora e ai sim você consegue printar ela, porém ainda tem um outro porém, se você usar um "if else", você é obrigado ou a criar uma variavel com o "valor = 0 ", ou colocar como "else" essa variavel com "valor = 0", porque se não o compilador intende que essa variavel pode não ser inicializada em nenhuma das condições o que geraria um erro, então ele já da erro antes.


if(conta == 10){
    desconto = conta / 1 * 0.01;
}
else{
    desconto == 0;
}




Aula 31 : Comentários em Java (básico)


Comentários de linha é representado por  :  //
Comentários de bloco é representado por  : /*   */


Aula 32 : Funções (Sintaxe)



package basic;

import java.util.Locale;
import java.util.Scanner;

public class Program {
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		System.out.println("Enter three numbers:");
		int a = sc.nextInt();
		int b = sc.nextInt();
		int c = sc.nextInt();
		int higher = max(a, b, c);
		showResult(higher);
		sc.close();
	}

	public static int max(int x, int y, int z) {
		int aux;
		if (x > y && x > z) {
			aux = x;
		} else if (y > z) {
			aux = y;
		} else {
			aux = z;
		}
		return aux;
	}

	public static void showResult(int value) {
		System.out.println("Higher = " + value);
	}
}


Aqui quando eu vou criar uma nova função eu tenho que criar ela fora do escopo da "main" e ai eu crio ela e na declaração de nomes eu crio como "public static " e ai depois eu tenho que declarar qual o tipo de dado que a minha função vai retornar, e em seguida eu tenho que colocar o nome dela, e depois eu passo os valores que eu espero que ela trate entre parenteses, após isso abre chaves e ai vem a logica dentro das chaves, e por ultimo depois da logica se minha função for devolver algum dado eu preciso setar o "return" dentro dela para que após o processamento ela me devolva a info que foi processada ou tratada.
E quando eu eu vou apenas apresentar uma info sem processamento eu passo na definição da função eu não passo o tipo e sim passo "void".


Aula 33 : Debugging com Eclipse


Basicamente para rodar um debug no java como se faz ou clica na linha onde você quer que comece o debug e clica em "ctrl + shift + b" ou clica na linha que se quer iniciar o debug e vai em "run" e clicla em "toggle breakpoint", ai assim que você iniciar o programa ele só vai entrar no modo de debug quando a execução do programa chegar naquela linha que você marco com o breakpoint, para rodar o debug clica no icone de inseto ao lado do icone de iniciar programa,   e ai ele vai te perguntar se você quer mudar para a pespectiva de debug,    quando você muda ele vai de dar duas opções ou aperta F6 (step over) que seria pular linha por linha mais não vai entrar na execução de nenhuma função que possa existir no meio do processo, e se você apertar F5 (step into) ele vai executar linha a linha e vai entrar nas funções que existirem no meio do caminho.


Aula 34 : Estrutura repetitiva while


import java.util.Locale;
import java.util.Scanner;

public class basic {
	public static void main(String[] args) {
		
		Scanner sc = new Scanner(System.in);
		Locale.setDefault(Locale.US);
		
		
		System.out.println("Digite um valor : ");
		double n = sc.nextDouble();
		
		
		while(n > 0.0) {
			double sr = Math.sqrt(n);
			System.out.printf("%.3f %n", sr);
			System.out.println("Digite um novo numero : ");
			n = sc.nextDouble();
		}
		
		System.out.println("Numero negativo da ruim");
		

		sc.close();
	}
}

Aqui é um while normal, eu to executando até acabar o processamento, mais como eu to mandando ele pedir um novo valor ele para o processamento mais fica sempre ativo e escutando.



Aula 35 : AVISO: exercícios para iniciantes PARTE 3

Aqui ele só avisou que para iniciantes é obrigatório a execução dos exercicios.


Aula 36 : Exercícios para Iniciantes - PARTE 3

Baixar o PDF, e fazer os exercicios.

to fazendo....



Exercicio 1


import java.util.Locale;
import java.util.Scanner;

public class basic {
	public static void main(String[] args) {
		
		Scanner sc = new Scanner(System.in);
		Locale.setDefault(Locale.US);
		
		int num = sc.nextInt();
		
		while(num != 2002) {
			System.out.println("Senha Invalida");
			num = sc.nextInt();
			//Aqui tem que ser apenas a variavel direto sem a atribuição de tipo que ai eu to dizendo que vou usar essa variavel e não criar uma nova com o mesmo nome.
			
		}
			System.out.println("Acesso Permitido");
		
		

		sc.close();
	}
}



Exercicio 2 


import java.util.Locale;
import java.util.Scanner;

public class basic {
	public static void main(String[] args) {
		
		Scanner sc = new Scanner(System.in);
		Locale.setDefault(Locale.US);

		double x = sc.nextDouble();
		double y = sc.nextDouble();
		
		while(x != 0.0 && y != 0.0) {
			if (x > 0 && y > 0) {
				System.out.println("primeiro");
			}
			else if (x < 0 && y > 0) {
				System.out.println("segundo");
			}
			else if (x < 0 && y < 0) {
				System.out.println("terceiro");
			}
			else {
				System.out.println("quarto");
			}
			x = sc.nextInt();
			y = sc.nextInt();
		}
		
//Aqui é o esquema dos eixos, tem que colocar as variveis dentro igual o outro porém da para usar um "if else" dentro do while, para que ele seja executado enquanto os valores estiverem dentro do range especificado.
		sc.close();
	}
}

Exercicio 3


import java.util.Locale;
import java.util.Scanner;

public class basic {
	public static void main(String[] args) {
		
		Scanner sc = new Scanner(System.in);
		Locale.setDefault(Locale.US);

		int alcool = 0;
		int gasolina = 0;
		int diesel = 0;
		
		int tipo = sc.nextInt();
		
		while (tipo != 4) {
			if (tipo == 1) {
				alcool = alcool + 1;
			}
			else if (tipo == 2) {
				gasolina = gasolina + 1;
			}
			else if (tipo == 3) {
				diesel = diesel + 1;
			}
			
			tipo = sc.nextInt();
		}

		System.out.println("MUITO OBRIGADO");
		System.out.println("Alcool: " + alcool);
		System.out.println("Gasolina: " + gasolina);
		System.out.println("Diesel: " + diesel);
		
		sc.close();
		//Aqui é simples a explicação se eu digitar um numero que seja diferente de 4 mais que é igual a alguma das outras respostas eu pego o valor que está armazenado na variavel correspondente e acrescento o valor dessa variavel mais 1.
		
	}
}



Aula 37 : Estrutura repetitiva for


import java.util.Locale;
import java.util.Scanner;

public class basic {
	public static void main(String[] args) {
		
		Scanner sc = new Scanner(System.in);
		Locale.setDefault(Locale.US);

	
		System.out.print("Quantos numeros vc vai digitar : ");
		int n = sc.nextInt();
//Aqui é o seguinte eu to esperando ser digitado um valor para poder saber quantos numeros serma inseridos		
		
		int soma = 0;
		for(int i = 1; i <= n; i++) {
			System.out.print("Digite o valor # "+ i +":");
			int x = sc.nextInt();
			soma += x;
		}
//Aqui eu criei uma variavel que vai servir para fazer a conta de quantos numeros eu devo apresentar e a cada execução do bloco eu incremento 1 e inicio ela em 0.
		
		System.out.print("Soma : " + soma);
//Apresento o valor da soma dos valores digitados.
		
		
		sc.close();
		
	}
}





Aula 38 : AVISO: exercícios para iniciantes PARTE 4


Aviso de exercicios.


Aula 39 : Exercícios para iniciantes PARTE 4

Exercicio 1

import java.util.Locale;
import java.util.Scanner;

public class basic {
	public static void main(String[] args) {
		
		Scanner sc = new Scanner(System.in);
		Locale.setDefault(Locale.US);

		int x = sc.nextInt();
		
		for (int i=1; i<=x; i++) {
			if (i % 2 != 0) {
				System.out.println(i);
			}
		}
//Aqui eu pego o valor que foi digitado e vou pegando o resto da divisão enquanto o resto da divisão não for 0.
		
		sc.close();
		
	}
}




Exercicio 2

import java.util.Locale;
import java.util.Scanner;

public class basic {
	public static void main(String[] args) {

		Scanner sc = new Scanner(System.in);
		Locale.setDefault(Locale.US);

		int n = sc.nextInt();

		int in = 0;
		int out = 0;

		for (int i = 0; i < n; i++) {
			int x = sc.nextInt();
			if (x >= 10 && x <= 20) {
				in = in + 1;
			} else {
				out = out + 1;
			}
		}
//Aqui eu mosquei de novo era só criar variaveis com os nomes das saidas para serem incrementadas, e ai se o numero for maior ou igual 10 e menor ou igual a 20 eu acrescendo mais 1 na variavel "in", se não eu acrescento na variavel "out"

		System.out.println(in + " in");
		System.out.println(out + " out");

		sc.close();

	}
}



Exercicio 3


import java.util.Locale;
import java.util.Scanner;

public class basic {

	public static void main(String[] args) {

		Locale.setDefault(Locale.US);
		Scanner sc = new Scanner(System.in);

		int n = sc.nextInt();
		
		for (int i=0; i<n; i++) {
			
			double a = sc.nextDouble();
			double b = sc.nextDouble();
			double c = sc.nextDouble();

			double media = (a * 2.0 + b * 3.0 + c * 5.0) / 10.0;

			System.out.printf("%.1f%n", media);
		}
		
		sc.close();
	}
}

//Aqui é o mesmo principio eu to dizendo para o meu for que ele vai executar até que o valor de "i" ser igual ao valor de "n", e dentro do for eu coloco as minhas regras de "negocio"



Exercicio 4 




import java.util.Locale;
import java.util.Scanner;

public class basic {

	public static void main(String[] args) {

		Locale.setDefault(Locale.US);
		Scanner sc = new Scanner(System.in);

		int n = sc.nextInt();
		
for (int i=0; i<n; i++) {
			
			int x = sc.nextInt();
			int y = sc.nextInt();
			
			if (y == 0) {
				System.out.println("divisao impossivel");
			}
			else {
				double div = (double) x / y;
				System.out.printf("%.1f%n", div);
			}
		}
		sc.close();
	}
}

//Aqui o meu estava dando erro porque eu não tinha colocado a regra se o segundo valor for negativo eu tenho que proibir a divisão, isso ai deve ser regra de matematica, tava meio foda antes os esquemas de logica agora ta matando é a matematica normal,kkkkk



Exercicio 5



import java.util.Locale;
import java.util.Scanner;

public class basic {

	public static void main(String[] args) {

		Locale.setDefault(Locale.US);
		Scanner sc = new Scanner(System.in);

		int n = sc.nextInt();
		
		int fat = 1;
		for (int i=1; i<=n; i++) {
			fat = fat * i;
		}
		
		System.out.println(fat);
		sc.close();
	}
}
//Minha Logica está uma merda, eu não consegui pensar assim simples, eu ia pegar o valor que foi decrementado e ia ficar inserindo ele varias vezes isso alem de muito trampo ia ser uma merda para conseguir rodar, dessa for o que acontece ele só incrementa o valor do fatorial, e não mexe no valor que foi inserido, sendo assim ele faz a conta não do numero inserido regredindo até 1 ele faz a conta inversa do numero 1 até o numero digitado, o filho da mãe é um genio.




Exercicio 6


import java.util.Locale;
import java.util.Scanner;

public class basic {

	public static void main(String[] args) {

		Locale.setDefault(Locale.US);
		Scanner sc = new Scanner(System.in);

		int n = sc.nextInt();

		for (int i = 1; i <= n; i++) {
			if (n % i == 0) {
				System.out.println(i);
			}for (int i = 1; i <= n; i++) {
			if (n % i == 0) {
				System.out.println(i);
			}
		}

		sc.close();
	}
}

//Aqui minha logica estava invertida, eu estava querendo printar quando não fosse 0 mais a divisão só pode ser feita quando o resto é 0 então eu vou iterando o "i" e divindo por ele enquanto o resto for igual a 0.



Exercicio 7 


import java.util.Locale;
import java.util.Scanner;

public class basic {

	public static void main(String[] args) {

		Locale.setDefault(Locale.US);
		Scanner sc = new Scanner(System.in);

		int n = sc.nextInt();
		
		for (int i = 1; i <= n; i++) {
			int quad = i *i;
			int cubo = i * i* i;
		System.out.printf("%d ",i);
		System.out.printf("%d ",quad);
		System.out.printf("%d %n",cubo);
		}
		sc.close();
	}
}

//CARALHO até que em fim um deles eu fiz solo, sem olhar porra nenhuma, vamo que da, um passo de cada vez.
//Mais aqui eu to verificando a quantidade de linhas que serão inseridas no programa, ai eu insiro dinamicamente essas linhas até o limite que foi digitado pelo usuario, e ai eu pego o numero da linha e apresento o quadrado e o cubo do valor da linha.



Aula 40 : xercício de fixação - estruturas repetitivas while e for

import java.util.Locale;
import java.util.Scanner;

public class basic {

	public static void main(String[] args) {

		Locale.setDefault(Locale.US);
		Scanner sc = new Scanner(System.in);

		System.out.println("Enter N");
		int n = sc.nextInt();
		
		while(n <= 0) {
			System.out.printf("N must be positive! Try again : %d %n", n);
			n = sc.nextInt();
			
		}
		
		int higher = Integer.MIN_VALUE;
		for (int i = 1; i <= n; i++) {
		System.out.print("Value #" + i + ": ");
		int x = sc.nextInt();
		if (x > higher) {
		higher = x;
		}
		System.out.println("Higher = " + higher);
		}

		sc.close();
	}
}

// Aqui eu fiz certinho até a parte do while, quando chegou no for deu uma bugada para achar o maior valor, mais pelo que eu intendi desse "Integer.MIN_VALUE", esse cara foi atribuido na variavel "higher" e ai ele faz o seguinte se o "x" for maior que o "heigher" ele atribui o valor do "x" no "higher", Aqui ele está atribuindo a variavel "higher" logo de cara o menor valor inteiro possivel, e ai ele começa a validar, se o valor que foi digitado é maior que o o valor que esta la, provavelmente o 1º vai ser , dai ele atribui o novo valor em "higher" e ai roda de novo, e ai ele pega o segundo valor e verificar se for maior ele muda o valor de "higher" e se não ele mantem esse valor, sendo assim quando acabar de rodar o programa ele vai ter mantido o maior valor.
//O miseravel é um Genio.




Aula 41 : Estrutura repetitiva do-while



import java.util.Locale;
import java.util.Scanner;

public class basic {

	public static void main(String[] args) {

		Locale.setDefault(Locale.US);
		Scanner sc = new Scanner(System.in);

		
		char letter;
		
	do {
		System.out.println("Entar a nuber :");
		int num = sc.nextInt();
		

		double sqrt = Math.sqrt(num);
		System.out.printf("Square root %.3f %n",sqrt);
		System.out.println("continue (y/n) ?");
		letter = sc.next().charAt(0);
	}while(letter != 'n');
		
		
		
		sc.close();
	}
}


Aqui é o seguinte eu estou esperando um numero, e ai eu vou e faço uma raiz quadrada do numero, e depois eu pergunto se ele quer continuar ou não se ele quiser eu faço novamente a solicitação de um numero, se não termino o programa, poderia colocar uma validação para ver se ele dfigitou numero onde eu espero numero e se digitou letra onde eu espero letra, mais to na paz.




Introdução à Programação Orientada a Objetos

Aula 42 : Visão geral do capítulo 3


Explicou o que vamos ver nese capitulo e que vamos resolver um problema sem orientação a objetos e depois o mesmo problema com a orientação.


Aula 43 : Material de apoio do capítulo

Baixei dois PDFs


Aula 44 : Resolvendo um problema sem orientação a objetos


package application;

import java.util.Locale;
import java.util.Scanner;

public class Program {

	public static void main(String[] args) {
		
		Locale.setDefault(Locale.US);
		Scanner sc = new Scanner(System.in);
		
		double xA, xB, xC, yA, yB, yC;
		System.out.println("Enter the measures of triangle X: ");
		xA = sc.nextDouble();
		xB = sc.nextDouble();
		xC = sc.nextDouble();
		System.out.println("Enter the measures of triangle Y: ");
		yA = sc.nextDouble();
		yB = sc.nextDouble();
		yC = sc.nextDouble();
		
//Aqui to pegando todos os valores que serão digitados
		double p = (xA + xB + xC) / 2.0;
		double areaX = Math.sqrt(p * (p - xA) * (p - xB) * (p - xC));
		p = (yA + yB + yC) / 2.0;
		double areaY = Math.sqrt(p * (p - yA) * (p - yB) * (p - yC));
		
		
//Aqui é a formula para calcular a area dos triangulos 
		System.out.printf("Triangle X area: %.4f%n", areaX);
		System.out.printf("Triangle Y area: %.4f%n", areaY);
		if (areaX > areaY) {
		System.out.println("Larger area: X");
		}
		else {
		System.out.println("Larger area: Y");
		}
		sc.close();
	}

}




Aula 45 : Criando uma classe com três atributos para representar melhor o triângulo


Casse Triangulo


package entities;

public class Triangule {

	public double a;
	public double b;
	public double c;
}


Aqui minha classe só tem os atributos sem os metodos, mais ainda assim uma classe é apenas uma definição de tipo, e essa minha classe aqui tem apenas os 3 atributos a,b,c.



Arquivo que resolve a area do triangulo com O.Object

package application;

import java.util.Locale;
import java.util.Scanner;

import entities.Triangule;

public class Program {

	public static void main(String[] args) {
		
		Locale.setDefault(Locale.US);
		Scanner sc = new Scanner(System.in);
		
		Triangule x,y;
		x = new Triangule();
		y = new Triangule();
		System.out.println("Enter the measures of triangle X: ");
		x.a = sc.nextDouble();
		x.b = sc.nextDouble();
		x.c= sc.nextDouble();
		System.out.println("Enter the measures of triangle Y: ");
		y.a = sc.nextDouble();
		y.b = sc.nextDouble();
		y.c = sc.nextDouble();
		
//Aqui to pegando todos os valores que serão digitados
		double p = (x.a + x.b + x.c) / 2.0;
		double areaX = Math.sqrt(p * (p - x.a) * (p - x.b) * (p - x.c));
		p = (y.a + y.b + y.c) / 2.0;
		double areaY = Math.sqrt(p * (p - y.a) * (p - y.b) * (p - y.c));
		
		
//Aqui é a formula para calcular a area dos triangulos 
		System.out.printf("Triangle X area: %.4f%n", areaX);
		System.out.printf("Triangle Y area: %.4f%n", areaY);
		if (areaX > areaY) {
		System.out.println("Larger area: X");
		}
		else {
		System.out.println("Larger area: Y");
		}
		sc.close();
	}

}


Nesse caso aqui eu primeiro invoquei a classe triangulo e passei para ela dois parametros, depois eu preciso instaciar esses dois caras como sendo "new" ou novo objeto da classe "Triangule", é isso que eu estou fazendo la na declaração, e para acessar eles eu preciso referenciar como objeto, por isso o "x.a" que ai é o objeto "x" acessando o atributo "a".

Ai ainda tem uma parada que ele explicou aqui é o seguinte todas as vezes que  você cria ou instancia variaveis elas são criadas dentro de uma area chamada "STACK" que é onde são criadas as variaveis estaticas, e ai quando eu uso o "new" eu faço uma alocação dinamica de memoria e crio ou instancio o objeto "Triangle" dentro de uma outra area da memoria chamada "HEAP", e ai no meu objeto que está na "STACK" fica o endereço de de onde está o meu OBJ dentro de "HEAP".



Aula 46 : Criando um método para obtermos os benefícios de reaproveitamento e delegação


Classe Triangulo



package entities;

public class Triangule {

	public double a;
	public double b;
	public double c;


	public double area() {
	double p = (a + b + c) / 2.0;
	return Math.sqrt(p * (p - a) * (p - b) * (p - c));
	}
}


//Aqui passei toda a regra de calculo da area do triangulo para dentro da classe mesmo, e ai agora ela é responsavel por fazer o calculo e retornar o valor, e como todas as variaveis que eu preciso estão dentro da minha classe eu não preciso passar nada como parâmetro, e alem disso eu coloco tudo como public porque significa que ela pode ser chamada de qualquer lugar sem problemas.


Arquivo com o Programa

package application;

import java.util.Locale;
import java.util.Scanner;

import entities.Triangule;

public class Program {

	public static void main(String[] args) {
		
		Locale.setDefault(Locale.US);
		Scanner sc = new Scanner(System.in);
		
		Triangule x,y;
		x = new Triangule();
		y = new Triangule();
		
		//Aqui é a instaciação do objeto "Triangule", passando "x" como um "novo triangulo" e "y" como um novo  "triangulo"
		System.out.println("Enter the measures of triangle X: ");
		x.a = sc.nextDouble();
		x.b = sc.nextDouble();
		x.c= sc.nextDouble();
		System.out.println("Enter the measures of triangle Y: ");
		y.a = sc.nextDouble();
		y.b = sc.nextDouble();
		y.c = sc.nextDouble();
		//Aqui como eu passei ele como objeto eu declaro que os atributos dele vai ser referenciados com o "."(ponto)

		double areaX = x.area();
		double areaY = y.area();
		//Aqui mudou porque agora eu tenho todo calculo sendo feito direto dentro da minha classe então eu to passando o "x" e "y" como parÂmetro e dizendo que o valor ou os valores de "x" e "y" que serão calculados dentro da variavel
		
		

		System.out.printf("Triangle X area: %.4f%n", areaX);
		System.out.printf("Triangle Y area: %.4f%n", areaY);
		if (areaX > areaY) {
		System.out.println("Larger area: X");
		}
		else {
		System.out.println("Larger area: Y");
		}
		sc.close();
	}

}


Aula 47 : Começando a resolver um segundo problema exemplo



Arquivo Programa


package application;

import java.util.Locale;
import java.util.Scanner;

import entities.Product;

public class Program {

	public static void main(String[] args) {
		
		Locale.setDefault(Locale.US);
		Scanner sc = new Scanner(System.in);

		Product product = new Product();
		//Instanciando o meu objeto product.
		
		
		System.out.println("Enter product data: ");
			System.out.print("Name: ");
			product.name =sc.nextLine();
			System.out.print("Price: ");
			product.price = sc.nextDouble();
			System.out.print("Quantity in stock: ");
			product.quantity = sc.nextInt();
			//Captura de dados
			
			
			//Aqui é apenas para ver se está funcionando
			System.out.println(product.name+","+product.price+","+product.quantity);
			
		
		
		
		
		
		sc.close();
	}

}



Classe Product




package entities;

public class Product {

	public String name;
	public double price;
	public int quantity;
	//Declaração de atributos da minha classe(objeto)
	
	public double totalValueInStock() {
		return price * quantity;
	}
	//Aqui como ele vai retornar uma soma eu tenho que passar o tipo dele e já passo direto o preço calculado como retorno.
	
	public void addProducts(int quantity) {
		this.quantity += quantity;
	}
	
	public void removeProducts(int quantity) {
		this.quantity -= quantity;
	}
	//nesses aqui é decremento e incremento normal, e como eu não retorno nada eu crio eles como "void"
}





Aula 48 : Object e toString


Parece que toda classe em java é um "extends" da classe "objects" do java isso significa que eu herdo todos os metodos da classe "objects" e um deles que é o que vai ser usado aqui na classe é o "toString", que praticamente formata o retorno ou o que eu quiser e me devolve como string.

Classe Product
package entities;

public class Product {

	public String name;
	public double price;
	public int quantity;
	//Declaração de atributos da minha classe(objeto)
	
	public double totalValueInStock() {
		return price * quantity;
	}
	//Aqui como ele vai retornar uma soma eu tenho que passar o tipo dele e já passo direto o preço calculado como retorno.
	
	public void addProducts(int quantity) {
		this.quantity += quantity;
	}
	
	public void removeProducts(int quantity) {
		this.quantity -= quantity;
	}
	//nesses aqui é decremento e incremento normal, e como eu não retorno nada eu crio eles como "void"
	
	public String toString() {
		return "Product data: " + name + ", $ " + String.format("%.2f",price) + ", " + quantity + "units, Total: $ " + String.format("%.2f", totalValueInStock());
		//Aqui eu estou sobrescrevendo o processo normal do metódo "toString" do java e mandando ele devolver o "toString" da maneira como eu parametrizei, e ai o que acontece para poder formatar os doubles ou pontos flutuantes eu preciso colocar esse "String.format("","")" porque agora eu to tratando um double e transformando ele em string dai eu formato ele para pegar as duas casas que eu quero e ai eu mando a string formatada como eu quero.
	}
}






Arquivo Program


package application;

import java.util.Locale;
import java.util.Scanner;

import entities.Product;

public class Program {

	public static void main(String[] args) {
		
		Locale.setDefault(Locale.US);
		Scanner sc = new Scanner(System.in);

		Product product = new Product();
		//Instanciando o meu objeto product.
		
		
		System.out.println("Enter product data: ");
			System.out.print("Name: ");
			product.name =sc.nextLine();
			System.out.print("Price: ");
			product.price = sc.nextDouble();
			System.out.print("Quantity in stock: ");
			product.quantity = sc.nextInt();
			//Captura de dados
			
			
			
			System.out.println(product);
			//Aqui é o seguinte eu agora posso mandar printar direto o "product" porque eu sobrepus a execução original do "toString" padrão do java e coloquei a minha execução por cima, e ai por isso que mando printar apenas o produto e ainda assim ele printa uma parada toda formatadinha toda bonitinha.
		
		
		
		
		
		sc.close();
	}

}


Aula 49 : Finalizando o programa

Arquivo Program.java

package application;

import java.util.Locale;
import java.util.Scanner;

import entities.Product;

public class Program {

	public static void main(String[] args) {
		
		Locale.setDefault(Locale.US);
		Scanner sc = new Scanner(System.in);

		Product product = new Product();
		//Instanciando o meu objeto product.
		
		
		System.out.println("Enter product data: ");
			System.out.print("Name: ");
			product.name =sc.nextLine();
			System.out.print("Price: ");
			product.price = sc.nextDouble();
			System.out.print("Quantity in stock: ");
			product.quantity = sc.nextInt();
			//Captura de dados
			
			
			
			System.out.println(product);
			//Aqui é o seguinte eu agora posso mandar printar direto o "product" porque eu sobrepus a execução original do "toString" padrão do java e coloquei a minha execução por cima, e ai por isso que mando printar apenas o produto e ainda assim ele printa uma parada toda formatadinha toda bonitinha.
		
		System.out.println();
		System.out.println("Enter the number of products to be added in stock: ");
		int quantity = sc.nextInt();
		product.addProducts(quantity);
		
		System.out.println("Update data" + product);
		
		System.out.println();
		System.out.println("Enter the number of products to be removed in stock: ");
		quantity = sc.nextInt();
		product.removeProducts(quantity);
		
		System.out.println("Remove data" + product);
		
		sc.close();
	}

}

basicamente eu estou utilizando as funções que estão na minha classe "Product.java", e fazendo soma e a remoção de produtos, e como já está tudo pronto é só usar o metodo e tudo lindo.

Aula 50 : Exercicios de fixação

Exercicio 1
Calcular a area perimetro e a diagonal de um RETANGULO

Aquivo program.java




package application;

import java.util.Locale;
import java.util.Scanner;
import entities.Rectangle;

public class Program {

	public static void main(String[] args) {
		
		
		Locale.setDefault(Locale.US);
		Scanner sc = new Scanner(System.in);
		
		Rectangle rect = new Rectangle();
		System.out.println("Enter  rectangule  wigth: ");
		rect.width = sc.nextDouble();
		
		System.out.println("Enter rectangule height : ");
		rect.height = sc.nextDouble();
				
		System.out.printf("AREA = %.2f%n", rect.area());
		System.out.printf("PERIMETER = %.2f%n", rect.perimeter());
		System.out.printf("DIAGONAL = %.2f%n", rect.diagonal());
		
//		Aqui é o padrão eu criei uma classe que tem toda a intelingência de negócio e aqui eu uso essa inteligencia.
		sc.close();
	}

}




Arquivo rectangule.java





package entities;

public class Rectangle {
	public double width;
	public double height;
	
	public double area() {
		return width * height;
	}
//	Aqui é para medir a area do retangulo base vezes altura
	
	public double perimeter(){
		return 2* (width * height);
	}
//	Aqui é o calculo do perimetro que é 2 vezes base vezes altura.
	
	
	public double diagonal() {
		return Math.sqrt(width * width + height * height);
		}
	
//	aqui é o valor na diagonal que é raiz quadrada de base x base + altura x altura
}



Exercicio 2
Calcular Salario + imposto do funcionario


Arquivo program.java

package application;

import java.util.Locale;
import java.util.Scanner;

import entities.Employee;


public class Program {

	public static void main(String[] args) {
		
		
		Locale.setDefault(Locale.US);
		Scanner sc = new Scanner(System.in);
		
		Employee emp = new Employee();
//Instanciei uma nova instancia da minha classe e chamei ela de emp		
		
		System.out.print("Name: ");
		emp.name = sc.nextLine();
//To pegando o nome do piao		
		
		System.out.print("Gross salary: ");
		emp.grossSalary = sc.nextDouble();
//Aqui to pegando o sario bruto do cara, ou seja sem o desconto
		
		System.out.print("Tax: ");
		emp.tax = sc.nextDouble();
//Aqui to pegando o valor do imposto que vai ser descontado.
		
		System.out.println();
		System.out.println("Employee: " + emp);
		System.out.println();
//Pulei linhas para poder mostrar os dados dele, nome e o valor que foi obtido da operação.	
		
		
		System.out.print("Which percentage to increase salary? ");
		double percentage = sc.nextDouble();
		emp.increaseSalary(percentage);
		System.out.println();
//Aqui to peguntando para ele o valor em porcentagens que vai ser acrescentado no salario bruto do pião.
		
		System.out.println("Updated data: " + emp);	
//	Aqui já mostro direto na tela o novo valor.
		
		sc.close();
	}

}




Arquivo  Employee.java

package entities;

public class Employee {

	public String name;
	public double grossSalary;
	public double tax;
	
	public double netSalary() {
	return grossSalary - tax;
	}
//Aqui eu pego o salario e subtraio o valor que tenho que pagar de imposto
	
	public void increaseSalary(double percentage) {
	grossSalary += grossSalary * percentage / 100.0;
	}
//Aqui eu multiplico salario pelo valor da porcentagem que foi digitado e divido por 100 e ai somo com o valor antigo do salario
	
	public String toString() {
	return name + ", $ " + String.format("%.2f", netSalary());
	}
//por ultimo eu formatei uma String para poder devolver já com as infor certinhas.
	
}




Exercicio 3 
Calculo de notas de aluno

Arquivo program.java


package application;

import java.util.Locale;
import java.util.Scanner;

import entities.Student;


public class Program {

	public static void main(String[] args) {
		
		
		Locale.setDefault(Locale.US);
		Scanner sc = new Scanner(System.in);
		
		Student sts = new Student();
// Normal instanciei a classe Student
		
		System.out.println("Digite o nome do aluno: ");
		sts.nome = sc.next();
		
		System.out.println("Digite a peimeira nota: ");
		sts.notaUm = sc.nextDouble();
		
		System.out.println("Digite a peimeira nota: ");
		sts.notaDois = sc.nextDouble();
		
		System.out.println("Digite a peimeira nota: ");
		sts.notaTres = sc.nextDouble();
// Li tudo que foi digitado e armazenei em variaveis.		

		
		System.out.printf("Nota Final : %.2f%n", sts.soma());
// Primeiro job feito com as variaveis foi somalas.
		
		if (sts.soma() < 60.0) {
			System.out.println("FAILED");
			System.out.printf("MISSING %.2f POINTS%n", sts.verify());
			}
			else {
			System.out.println("PASS");
			}
// Aqui tem primeiro uma validação se a soma das notas for menor que 60.0 eu entro nesse bloco e mostro a mensagem se não eu já mando um "PASS"
		
		
		sc.close();
	}

}





Arquivo Student.java
package entities;

public class Student {


	public double notaUm;
	public double notaDois;
	public double notaTres;
	public String nome;
	
	
	public double soma() {
		return notaUm + notaDois + notaTres;
	}
//Aqui eu somo todas as notas de um aluno.
	
	
	public double verify() {
		if(soma() < 60.0) {
			return 60.0 - soma();
		}else {
			return 0.0;
		}
		
	}
// Aqui eu pego a soma das notas do aluno e se forem menor que  60.0 eu retorno o valor da nota menos 60.0 o que na teoria seria o valor que falta para chegar em em 60.0. 
	
	
	
}


Aula 51 : Membros estáticos - Parte 1

Ao que me parece esse cara aqui meio que serve para que você não precise instanciar uma classe todas as vezes, mais ai como você não instancia você precisa referenciar de alguma forma e a forma é utilizando o nome da classe e o metodo dela.


Método 1

Arquivo Program.java


package application;

import java.util.Locale;
import java.util.Scanner;



public class Program {

	public static final double PI = 3.14159;
/* Aqui é a declaração de uma constante em JAVA, tem que ser antes do (Atring[] Args) e tem que ser escrito com o nome todo em maiusculo,
 * e precisa ser "static" e "final" para que o valor não seja alterado. 
*/
	
	public static void main(String[] args) {
		
		
		Locale.setDefault(Locale.US);
		Scanner sc = new Scanner(System.in);
		
		System.out.println("Enter a radius: ");
		double radius =  sc.nextDouble();
		
		
		double c = circunference(radius);
		double v = volume(radius);
		
		System.out.printf("Circunference : %.2f%n",c);
		System.out.printf("Volume : %.2f%n", v);
		System.out.printf("PI value: %.2f%n", PI);
		sc.close();
	}

	public static double circunference(double radius) {
		return 2.0 * PI * radius;
	}
/*
 *	Aqui é o seguinte todas as vezes que você quiser usar um metodo estatico dentro do outro ele deve ser declarado como estatico nos dois lugares
 *	eu to usando um "static" nas funções porque eu não consigo chamar um metodo não estatico dentro de uma classe estatica.
 */
	
	
	public static double volume(double radius) {
		return 4.0 * PI * radius * radius * radius / 3.0;
	}
	
	
}



Método 2 

Arquivo Program.java



package application;

import java.util.Locale;
import java.util.Scanner;

import util.Calculator;



public class Program {


	
	public static void main(String[] args) {
		
		
		Locale.setDefault(Locale.US);
		Scanner sc = new Scanner(System.in);
		
		Calculator calc = new Calculator();
		
		System.out.println("Enter a radius: ");
		double radius =  sc.nextDouble();
		
		
		double c = calc.circunference(radius);
		double v = calc.volume(radius);
		
		System.out.printf("Circunference : %.2f%n",c);
		System.out.printf("Volume : %.2f%n", v);
		System.out.printf("PI value: %.2f%n", calc.PI);
		
		sc.close();
	}

//Aqui ta normal, instanciei a classe e usei os metodos dela como classe.metodo.
	
	
}



Arquivo Calculator.java

package util;

public class Calculator {
	
	public  final double PI = 3.14159;
	

	public  double circunference(double radius) {
		return 2.0 * PI * radius;
	}

	public  double volume(double radius) {
		return 4.0 * PI * radius * radius * radius / 3.0;
	}
	
	
// Aqui eu tive que tirar o "static" porque é um metodo normal de instanciação.
	
}



Aula 52 : Membros estáticos - Parte 2

Método 3 


Arquivo Program.java


package application;

import java.util.Locale;
import java.util.Scanner;

import util.Calculator;



public class Program {


	
	public static void main(String[] args) {
		
		
		Locale.setDefault(Locale.US);
		Scanner sc = new Scanner(System.in);
		
		
		System.out.println("Enter a radius: ");
		double radius =  sc.nextDouble();
		
		
		double c = Calculator.circunference(radius);
		double v = Calculator.volume(radius);
		
		System.out.printf("Circunference : %.2f%n",c);
		System.out.printf("Volume : %.2f%n", v);
		System.out.printf("PI value: %.2f%n", Calculator.PI);
		
		sc.close();
	}

//	Aqui é o seguinte, eu fiz com que a classe Calculator se torna-se igual a "Math" diferente do primeiro método que como eu estava com todos os métodos dentro da "String [] Args" eu não precisei chamar como sendo classe, mais agora como tem uma classe Calculator eu preciso chamar ele pelo nome da classe, porque dentro da classe está como "static" logo é um membro estatico.
	
}




Arquivo Calculator.java


package util;

public class Calculator {
	
	public static final double PI = 3.14159;
	

	public static double circunference(double radius) {
		return 2.0 * PI * radius;
	}

	public static double volume(double radius) {
		return 4.0 * PI * radius * radius * radius / 3.0;
	}
	
	
}


Aula 53 : Exercício de fixação


Aqui eu tinha que criar uma calculadora de cambio, onde eu calcularia dado o valor do dolar e a quantidade de dolares que eu quero ter mais 6% de IOF eu mostro o valor que ele vai pagar em reais.

Arquivo Program.java

package application;

import java.util.Locale;
import java.util.Scanner;

import util.CurrencyConverter;


public class Program {


	
	public static void main(String[] args) {
		
		
		Locale.setDefault(Locale.US);
		Scanner sc = new Scanner(System.in);
		
		
		System.out.println("What is the dollar price : ");
		double dollar =  sc.nextDouble();
		
		
		System.out.println("How many dollars will be bought : ");
		double money =  sc.nextDouble();		
		
		
		System.out.printf("Amount to be paid in reais =  %.2f%n",CurrencyConverter.calc(dollar, money));

		sc.close();
	}
	
}



Arquivo CurrencyConverter.java

package util;

public class CurrencyConverter {
 
	
	public static double calc(double dollar,double money) {
			double valor =  dollar * money;
			double percent  = valor * 6 / 100;
			return valor + percent;
	}
}


Seção: 4

Construtores, palavra this, sobrecarga, encapsulamento

Aula 54 : Visão geral do capítulo 4

Aqui ele vai mostrar como fazer o encapsulamento,e absorver tudo que é necessario saber sobre encapsulamento.



Aula 55 : Material de apoio do capítulo

Só tem material de apoio.


Aula 56 : Construtores


Construtores nada mais são que os metodos que são chamadas para criar uma nova instancia de uma classe, quando usamos :

Scanner sc = new Scanner();

aqui estamos utilizando o construtor padrão do java para instanciar uma nova classe de "Scanner".

mais esse construtor pode ser customizado, para que o objeto permita a inserção ou obrigue que sejam inserido dados no objeto ja na sua inicialização.

Arquivo Program.java


package application;
import java.util.Locale;
import java.util.Scanner;
import entities.Product;

public class Program {
	public static void main(String[] args) {
		Locale.setDefault(Locale.US);
		Scanner sc = new Scanner(System.in);
		
		
		System.out.println("Enter product data: ");
		System.out.print("Name: ");
		String name = sc.nextLine();
		
		System.out.print("Price: ");
		double price = sc.nextDouble();
		
		System.out.print("Quantity in stock: ");
		int quantity = sc.nextInt();
//Eu tive que instanciar como variaveis locais ou simples esses caras aqui para poder utilzar o construtor com parâmetros, e eu fiz isso para mostrar que da para usar o construtor da maneira que eu quiser.
		
		
		Product product = new Product(name, price, quantity);
//	Instancia do construtor já recebendo os parâmetros direto na instanciação.
		
		System.out.println();
		System.out.println("Product data: " + product);
		System.out.print("Enter the number of products to be added in stock: ");
		quantity = sc.nextInt();
		product.addProducts(quantity);
		System.out.println();
		System.out.println("Updated data: " + product);
		System.out.println();
		System.out.print("Enter the number of products to be removed from stock: ");
		quantity = sc.nextInt();
		product.removeProducts(quantity);
		System.out.println();
		System.out.println("Updated data: " + product);
		sc.close();
	}
}


Arquivo Product.java


package entities;

public class Product {
	public String name;
	public double price;
	public int quantity;

	
	public Product(String name, double price, int quantity) {
		this.name = name;
		this.price = price;
		this.quantity = quantity;
	}
//Aqui é onde eu altero o construtor padrão, eu estou usando o "this." porque assim eu estou referenciando o "name" do objeto, e não ao atributo name do construtor.
	
	
	
	public double totalValueInStock() {
		return price * quantity;
	}

	public void addProducts(int quantity) {
		this.quantity += quantity;
	}

	public void removeProducts(int quantity) {
		this.quantity -= quantity;
	}

	public String toString() {
		return name + ", $ " + String.format("%.2f", price) + ", " + quantity + " units, Total: $ "
				+ String.format("%.2f", totalValueInStock());
	}
}


Aula 57 : Palavra THIS

Aqui ele mostra que quando eu uso a palavra "this" dentro de um objeto ele está referenciando ao elemento dentro do objeto, ou seja eu peguei o valor de "name" que foi instanciado localmente e passei ela como parâmetro para um objeto, ai quando eu uso o ".this" eu to falando que eu quero pegar o valor da variavel que já está dentro do objeto.




Aula 58 : Sobrecarga


Arquivo Program.java





package application;
import java.util.Locale;
import java.util.Scanner;
import entities.Product;

public class Program {
	public static void main(String[] args) {
		Locale.setDefault(Locale.US);
		Scanner sc = new Scanner(System.in);
		
		
		System.out.println("Enter product data: ");
		System.out.print("Name: ");
		String name = sc.nextLine();
		
		System.out.print("Price: ");
		double price = sc.nextDouble();
//		
//		System.out.print("Quantity in stock: ");
//		int quantity = sc.nextInt();
//	Aqui eu tive que comentar essas linhas porque é o seguinte eu não preciso mais dessas informações porque eu criei uma sobre carga nessa chamada, então eu consigo chamar esse cara sem passar os 3 parâmetros, eu consigo passar ou nenhum, ou 2 parâmetros ou todos os 3.
		
		
		Product product = new Product(name, price);

		
		System.out.println();
		System.out.println("Product data: " + product);
		System.out.print("Enter the number of products to be added in stock: ");
		int quantity = sc.nextInt();
		product.addProducts(quantity);
		System.out.println();
		System.out.println("Updated data: " + product);
		System.out.println();
		System.out.print("Enter the number of products to be removed from stock: ");
		quantity = sc.nextInt();
		product.removeProducts(quantity);
		System.out.println();
		System.out.println("Updated data: " + product);
		sc.close();
	}
}






Arquivo Product.java




package entities;

public class Product {
	public String name;
	public double price;
	public int quantity;

	public Product() {
		
	}
//	Aqui é o construtor padrão eu não preciso criar esse cara normalmente mais como eu estou fazendo uma sobrecarga nesse cara eu posso deixar um cara para que seja instanciado normalmente sem nenhum parâmetro.
	
	
	public Product(String name, double price, int quantity) {
		this.name = name;
		this.price = price;
		this.quantity = quantity;
	}
//	Esse cara aqui é o construtor que foi modificado para receber 3 parâmetros de entrada ou seja eu obrigo que o cara quando for instanciar esse objeto ele passe todos esses parâmetros como sendo obrigatórios.
	
	
	public Product(String name, double price) {
		this.name = name;
		this.price = price;
	}	
//	Aqui é a mesma coisa, só que com 2 parâmetros apenas, e isso aqui caracteriza sobre carga eu consigo instanciar um objeto com varios parâmetros como sendo obrigatório e também mudar essa obrigatoriedade na chamada.
	
	public double totalValueInStock() {
		return price * quantity;
	}

	public void addProducts(int quantity) {
		this.quantity += quantity;
	}

	public void removeProducts(int quantity) {
		this.quantity -= quantity;
	}

	public String toString() {
		return name + ", $ " + String.format("%.2f", price) + ", " + quantity + " units, Total: $ "
				+ String.format("%.2f", totalValueInStock());
	}
}




Aula 59 : Encapsulamento



Aqui ele mostra como é feito encapsulamento.



Arquivo Program.java



package application;
import java.util.Locale;
import java.util.Scanner;
import entities.Product;

public class Program {
	public static void main(String[] args) {
		Locale.setDefault(Locale.US);
		Scanner sc = new Scanner(System.in);
		
		
		System.out.println("Enter product data: ");
		System.out.print("Name: ");
		String name = sc.nextLine();
		
		System.out.print("Price: ");
		double price = sc.nextDouble();

		
		
		Product product = new Product(name, price);

		System.out.println("Nome Agora: " + product.getName()); 
		product.setName("anal");
		System.out.println("Nome Depois: " + product.getName());
		
		System.out.println();
		System.out.println("Product data: " + product);
		System.out.print("Enter the number of products to be added in stock: ");
		int quantity = sc.nextInt();
		product.addProducts(quantity);
		System.out.println();
		System.out.println("Updated data: " + product);
		System.out.println();
		System.out.print("Enter the number of products to be removed from stock: ");
		quantity = sc.nextInt();
		product.removeProducts(quantity);
		System.out.println();
		System.out.println("Updated data: " + product);
		sc.close();
	}
}






Arquvio Product.java



package entities;

public class Product {
	private String name;
	private double price;
	private int quantity;
// Para começar a fazer o encapsulament você deve deixar os parâmetros como private, isso aqui já indica que não é acessivel por qualquer coisa ou qualquer um.
	
	
	public Product() {
		
	}
	
	
	public Product(String name, double price, int quantity) {
		this.name = name;
		this.price = price;
		this.quantity = quantity;
	}

	
	
	public Product(String name, double price) {
		this.name = name;
		this.price = price;
	}	

	
	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}
//  Como os parâmetros só são acessiveis pela propria classe eu preciso acessar ele com o "get" e para atribuir um novo valor eu preciso declarar o "set".
	
		
	public double totalValueInStock() {
		return price * quantity;
	}

	public void addProducts(int quantity) {
		this.quantity += quantity;
	}

	public void removeProducts(int quantity) {
		this.quantity -= quantity;
	}

	public String toString() {
		return name + ", $ " + String.format("%.2f", price) + ", " + quantity + " units, Total: $ "
				+ String.format("%.2f", totalValueInStock());
	}
}
