Seção 1

Começando no JQuery com o pé direito

Aula 1 : O que é o JQuery?

JQuery é uma "lib" que foi feita com base no javascript, e surgiu como uma forma de se fazer uma requisição ajax, com mais facilidade.


Aula 2 : Como o jQuery funciona?

primeiro entra no site do JQuery e acessa a sessão de downloads , e ai você baixa a versão minificada que fica mais leve no site, mais para estudos usamos a descompactada, e para inserir o JQuery na sua pagina é só colocar o "<script type="text/javascript" src="jquery-3.3.1.min.js"></script>" e ai nesse caso é necesario que o nosso arquivo que contem o javascript mesmo seja colocado abaixo do JQuery,porque pode ser que no arquivo JS ja tenha alguma coisa d JQuery.


Seção 2


Fundamentos do JQuery


Aula 3 : $ vs $()

$.acao = é quando você execulta uma determinada ação dentro do jquery, diretamente a ação.

$(elemento).acao = é quando você manda executar uma ação dentro ou em um elemento especifico.



Aula 4 : $( document ).ready()

Para evitar de ter problemas de carregamento de pagina ou de tentar executar uma ação do JS ou JQuery antes do elemento ter sido carregado o bizu é manda o JQuery executar só quando a pagina já tiver sido totalmente carregada.

$(document).ready(function(){
    alert("Curso de JQuery.");
});

Nesse exemplo eu chamo falo parao JQuery que eu quero que ele execute a minha função só quando o documento html estiver pronto, e a minha função assume que o "alert" é um atributo dela.


outra forma de ter o memso efeito é 
$(function(){
    alert("Curso de JQuery exemplo 2.");
});

Nesse aqui eu não passei o documento html mais memso assim o JQuery intende que só é para execultar o código após o carregamento completo da pagina.


Outra forma de fazer 
function tudoPronto(){
    alert("Tudo Pronto. exemplo 3");
}

$(document).ready(tudoPronto);

Nesse aqui eu criei uma função que será carregada junto com o documento HTML mais ela só vai ser executada quando o documento HTML estiver completamente carregado porque o JQuery vai garantir isso para mim, ai eu passo no "ready" o nome da minha função.


Aula 5 : Evitando conflito com outras bibliotecas

Como entre bibliotecas diferentes os metedos de utilização são os mesmos, podemos criar um atalho diferente para o JQuery, que ele mesmo já deixa por padrão.

var $L = jQuery.noConflict();

$L(document).ready(function(){
    alert("JQuery sendo chamado com $L");
});

que ai da para deixar o "$" para ser utilizado por qualquer outra lib que utilize isso como padrão.

jQuery(document).ready(function(){
    alert("Usando JQuery Nativamente, ou seja sem atalhos.")
});

essa aqui é outra forma de se evitar conflitos, utilizando o JQuery nativamente, é só trocar o "$" por pela palvra "jQuery()".

Aula 6 : Selecionando Elementos do HTML

Aqui para selecionarmos elementos HTML com JQuery é praticamente igual ao JS, mais é mais simples, porque pegamos ele com "$(tag)", e ai ele vai no nosso documento HTML e pega todas as tags com esse nome, para pegarmos apenas uma tag em especifico temos que pegar por "ID", e é a mesma sintax só que com o id  "$(#id);" igual em no css, e quando queremos pegar classes também é igual no css "$(.class);" só que as vezes precisamos pegar elementos dentro de listas e essas listas tem a mesma composição e tem a mesma classe, ai como faremos "$(.class tag.class);" ou "$(.class #id);" que funciona do mesmo jeito.

também tem uma forma de verificar se existe o elemento na pagiana, como 

if($(.botao).length > 0){
    alert ("Tem botão man.");
}

Porque todas as vezes ele sempre retorna um array, e mesmo que o array esteja vazio ele tem info, ou seja sempre vai ser verdadeiro, ai usamos essa validação JS para verificar se o retorno é maior que ZERO.

Ou ainda podemos atribuir o elemento a uma variavel, e para utilizar ele uso a propria variavel ao invés de refazer toda a seleção.

var meuItem = $('.lista2 li.botao');



Aula 7 : Manipulando Atributos de uma TAG

Isso serve para alterarmos atributos de uma tag, e como fazemos isso, primeiro você informa qual o nome da tag que você que pegar e depois usa uma propriedade chamda "attr()" de "attribute" e ai passa dois parâmetros o primeiro é qual atributo daquela tag que você quer alterar e o segundo para o que você quer alterar.

$('a').attr('href', 'https://xvideos.com');

Aqui eu peguei a tag "a" do meu documento HTML, peguei o atributo "href" dele e troquei o conteudo por "https://xvideos.com", mais isso só acontece no carregamento, e para pegar o valor de um atributo é só passar apenas o nome do atributo e ele tras o valor atual dele.

$('a').attr('href');

Assim ele vai trazer só o https://xvideos.com.



Aula 8 : O que fazer após a seleção?

Aqui eu criei uma div, e mesmo sendo uma div eu disse para o JQuery que eu quero mudar o valor que esta dentro dessa div para um outro e ai eu passo assim,

$('#teste').html('Novo TeXXto');

Pegeui pelo "ID" e disse que naquele "ID" eu quero mudar o valor para "Novo TEXXTO".



$('#teste').html();

Para ver o valor que está dentro segue o mesmo esquema do "attr", e deixa em branco.


$('#teste').find('button').addClass('estilo');

Aqui eu procurei o "id" "teste", depois mandei procurar um "button" dentro desse "id" e por ultimo adicionei uma classe usandoo "addClass" com o nome da classe que eu queria que fosse atribuida a esse elemento.


Aula 9 : Manipulando Elementos

Nessa aula ele ta mostrando mais algumas coisas que podem ser alteradas com o JQuery, e uma delas é ao invés de eu colocar "$().html();" eu coloco no lugar do "html" "text" , e nesse caso o JQuery, sabe que eu quero inserir um texto naquele lugar só que se eu tiver colocado TAGS HTML dentro do meu texto ele não interpreta e só printa o que eu mandei como valor.

$('#teste').text('<h1>Novo Texto</h1>');

Aqui apresenta exatamente como está dentro do bloco.

$('#teste').find('img').attr('width', '100');
Essa é uma das forma de se alterar um atributo de um elemento utilizando o "attr" e ai passa o nome do atributo a ser alterado e o valor desse atributo.

mais pode ser feito asssim também

$('#teste').find('img').width('100');

já passando o nome do atribuito como parâmetro e o valor a ser alterado.


Já com os campos "input" como ele não possui um "valor" de conteudo porque ele na teoria só captura valores não da para inserir valor trocando com o ".html();", neste caso temos que utilizar ou o "attr();" , ou utilizamos uma outra propriedade que é o "val();"

$('input').attr('value', 'Anal');

Assim funciona mais é dar muitas voltas.

$('input').val('Anal');

asssim é mais rapido e mais acertivo.


$('input').attr('placeholder', 'PlugAnal').attr('legend','Gay');

Aqui foi um teste meu, para ver se ele aceita varios parâmetros no mesmo "attr" e ele aceitou, 

Dica: Quando vamos alterar o valor que já existe dentro das TAGS "<li>Item 1</li>" usamos o "html();", e sempre que vamos alterar um atributo desse cara usamos o "attr();" mais para campos que não possuem um valor como o "<input type="text" name="nome"/>" utilizamos o "val();"



Para adicionarmos um novo elemento antes ou depois, 


Depois do Elemento
$('input').after('<input type="text" name="sobrenome"/>');



Antes do Elemento
$('input').before('<input type="text" name="sobrenome"/>');


ou só adicionar um novo, ao final de todo o conteudo já existente
$('ul').append("<li>Item 6</li>");


Adicionar um item novo antes do conteudo já existe
$('ul').prepend("<li>Item 0</li>");


Dica : O ".after();" e o ".before();" inserem antes e depois do elemento que foi selecionado.
já o "append();" e o "prepend();" inserem dentro do conteúdo do elemento selecionado respectivamente.


Aula 10 Transformando Elementos em Objetos jQuery


Nessa aula ele mostra como transformar elementos do HTML, em objetos do JQuery e ainda mais como é possivel trabalhar com isso.

var irineu = document.getElementById('div');

Aqui eu to pegando a minha "div" pelo "id" usando JS puro e como é pelo "id" não precisa usar o "#" porque o "getElementById" já declara que é por "id",e para se mandar esse valor atribuido a variavel "irineu" para o JQuery é assim:

$(irineu).html("New Irineu");

Dica: Quando se está passando uma variavel não se usa os apocrifos('').


$(document.getElementById("div")).html("Novo Teste do IRINEu");

Aqui eu estou passando como parâmetro para o JQuery a propria seleção em JS puro e já trabalhando diretamento na seleção.


Para selecionar item dentro de uma lista, apenas itens que possuem o mesmo nome mais nenhum "id" usamos o "eq();"

$('li:eq(1)');

Ele começa a varedura em todos as tags "li" e começa a contagem em zero"0", sendo assim ele vai me devolver a segunda ocorrencia de "li"

$('li').eq(1);

esse é outra forma de se obter o mesmo resultado.


Aqui temos uma forma de como alterar o valor de um item que não possui "id" utilizando os conhecimentos dos exemplos acima, primeiro eu defini que a variavel "eqTeste" seria igual ao item 3 da minha lista.

var eqTeste = $('li').eq(3);

e depois utilizei o JQuery para subistituir apenas o valor dele para mim.

$(eqTeste).html("Meu novo Item de Numero 4");


Aula 11 : Navegando Entre Elementos

Aqui vemos modos de como navegar entre os elementos, mesmo os que não possuem nenhuma identificação de "id" ou "classe", nesse caso em especifico eu tenho uma "div" com uma classe que se chama "filha" e eu quero pegar uma outra "div" apartir dela, então como eu faço isso?
se eu sei que o elemento em questão está envolvendo o elemento em que eu estou eu uso o "parent();"

$('.filha').parent();

mais o "parent();" só pega elementos que envolvem outros como por exemplo uma "div", o "body", uma "table", "ul", etc, essas são forma de busca de um elemento interno para elementos externos.

E ai temos as forma de procura de um elemento externo para os elementos internos.

$('.site').find('.topo').find('.subtopo').find('.filha');

Aqui eu fui pegando elemento por elemento até chegar onde eu queria, claro que como eu sei o nome do elemento (classe ou id dele), eu posso acessalo diretamente, mais essa é uma forma de pesquisa.

$('body').find('div').eq(0);

Nesse caso eu estou procurando a primeira "div" dentro de "body", e mesmo ela tendo uma "class" ele ainda me retorna ela e a class.

$('div').eq(0);

Aqui eu estou procurando uma "div" e não sei o nome da "class" nem do "id" dela eu mando procurar dentro do meu documento HTML a primeira ocorrencia de "div".


$('.irmao').closest('.topo');

Nesse caso aqui em especifico estou procurando uma "div" ou quem tem uma "class" que se chama  (topo), e eu estou em um elemento que tem uma "class" que se chama (irmao), o que eu fiz usei uma função nativa do JQuery que se chama ".closest();" que procura em todo o contexto de ".irmao" onde está o tal do ".topo".

Obs. só funciona se a sua busca for por um elemento que está no mesmo contexto do seu elemento, porque se você tiver uma "div" com 3 "div's" dentro dela formando niveis, o "closest();" só vai retornar ao primeiro nivel, e se não encontrar ele para ali a busca.


$('.irmao').closest('.site').find('.conteudo');

Já nesse caso o que estamos fazendo, retornando ao primeiro nivel de ".irmao" que nesse caso é o ".site" e apartir dele procuro o ".conteudo".

Dica: Só usar o "parent()", quando se tem a certeza que o que você procura está um nivel acima de onde você está, caso contrario use o "find();" ou o "closest();"


Aula 12 : CSS, Styling e Dimensões


Aqui vemos como adicionar ou remover css dos elementos com JQuery, primeiro a classe tem que existir ou no documento HTML ou no proprio arquivo de css,depois é muito simples seleciona o elemento tanto pelo nome(li, ul, div, etc) quanto pelo "id" ou pela "class", e usa uma propriedade do JQuery que é o "addClass();"

$('button').addClass('estilo');

Aqui como eu já estou dizendo que vou adicionar uma classe eu não preciso pasar com o ponto(.) o nome da classe.

$('button').removeClass('estilo');

e aqui é para removermos a classe do elemento selecionado, detalhe ele só remove a classe que você passou as outras vão permancer la.

if ( $('li').hasClass('estilo') ){
	alert("Ies Mein")
}else{
	alert("Nou Mein")
}

Aqui nesse caso estamos fazendo uma verificação para ver se o meu "li" tem a classe "estilo", e utilizamos dessa forma porque o parâmetro "hasClass();" devolver "true" ou "false", e essa informação por sim só não adianta muito por isso já colocamos ele dentro do "if" que dependendo do retorno ele já mostra a mensagem que preparamos.

$('li').css('color', '#ccc');


Aqui estamos acrescentando um estilização especifica no elemento, que também pode ser selecionado de qualquer maneira, nome, id, class, e com o parâmetro ".css();" adicionamos esse estilo novo ao elemento, sempre passando o proredade , valor.


Aula 13 : Guardando dados em um elemento

$('input').attr('data-idade','90');

Aqui temos algumas opções, ou colocamos como ".attr();" e atribuimos os valores nas variaveis, e nesse caso vira um atributo do elemento HTML



$('input').data('idade');

E para acessa-lo fazemos assim, é como se a propriedade ".data();" procurasse um parâmetro com nome "data" e depois do traço é o nome proprimente dito do meu parâmetro.



$('input').data('idade', 25);

Porém quando eu faço dessa forma eu gravo essa info apenas na memoria do navegador(é meio que um cache), e ele não muda minha TAG HTML.



$('input').data('idade');

Acesso o valor que está só na memoria e não no elemento HTML.



$('input').data('texto',$('input').val().length);

Nesse caso estou querendo pegar a quantidade de caracteres que está sendo passada no meu "input", e já estou atribuindo essa valor a memoria com o JQuery, e para acessa-lo é igual o de cima.

$('input').data('texto');


Aula 14 : Métodos Muito Úteis no dia-a-dia


Aqui logo de cara vemos uma função top que é o "$.trim();", o que ele faz, ele remove todos os espaços do seu texto ou variavel que são irelevante, ou seja todo espaço antes e depois da frase ou do texto.



var zeroEspacos = $('.anal').html();

Aqui estou atribuindo o valor da classe anal para a variavel zeroEspacos.



$.trim(zeroEspacos);

aqui estou aplicando o "$.trim();" e removendo todos os espaços antes e depois do texto.



var zeroEspacos = $.trim($('.anal').html());

Aqui é a mesma coisa porém de uma forma mais direta, ao invés de ir parte por parte eu já passo o "$.trim();" com  a seleção JQuery e ai quando eu mostro a variavel ela já esta com o valor formatado.


Outra função nativa do JQuery que serve para varrer arrays ou elementos é a "$.each(function(){});", e ela tem que receber uma função como parâmetro.

$('li').each(function(){
	alert($(this).html());
})

aqui eu to pegando todas as "li" que existem no meu documento HTML e dando um alerta para cada uma delas.


var nome = "Lucas";

$.type(nome);

Aqui eu to definindo uma varialvel e pedindo para o JQuery que ele me de o tipo dessa varialvel.



typeof(anal);

Aqui é com o JS puro, que é mais facil.


Ai ainda temos os esquemas de validação do proprio JQuery que é para saber se uma variaveis é de um determinado tipo como por exemplo "$.isNumeric();"


$.isNumeric(idade);
->true

Aqui eu determinei um valor para a variavel idade e depois verifiquei se aquela variavel é numerica ou não, o retorno é booleano., e tem mais opções como "$.isArray();", "$.isFunction();" etc.

*Vou ter que dar uma estudada a parte nessas paradas*




Aula 15 : FAQ: Como saber se um elemento existe?

Aqui ele mostrou como devemos fazer seleções com o JQuery da maneira correta, toda seleção feita em JQuery sempre retorna um array vazio "[]", ou seja como trouxe retorno mesmoq que vazio sua validação vai dar "treu", então temos que sempre verificar se o array é maior que "0(zero)".


if( $('.anal').length > 0){
	alert("Elemento Existe no Docuemnto");
}else{
	alert("Elemento Não Existe no Documento");
}

Aqui eu to verificando se o elemento existe ainda verificando se o tamanho do array de retorno é maior que "0(zero)".





Aula 16 : FAQ: Como saber se um elemento tem uma classe em particular?


if( $('li').hasClass('nome')){
	alert("Classe existe no documento");
}else{
	alert("Classe não existe no documento");
}


Aqui é igual o exemplo de cima porém é para verificar a existencia de uma classe, ai é utilizado o "$('elemento').hasClass('nomeDaClasse');"



Aula 17 : FAQ: Como ativar/desativar um elemento de formulário?


$('#btn').attr('disabled','disabled');

Aqui eu to selecionando o meu "input" que tem um "id = btn" e adicionando nele o atributo "disabled",que faz com que o meu campo fique readyonly.



$('#btn').removeAttr('disabled');

Aqui eu estou removendo o atributo "disabled" do meu "input".



$('#check').attr('disabled','disabled');

Aqui eu desabilito o campo, ele não pode ser mais acionado com click.


$('#check').removeAttr('disabled');

Aqui eu deixo o campo ativo novamente removendo o atributo "disabled".


$('#check').attr('checked','checked');

Aqui eu estou deixando marcada uma checkbox que tem no meu docuemnto HTML, utilizando JQuery.


$('#check').removeAttr('checked')

e aqui igual ao exemplo de cima removendo o atributo "checked" do meu checkbox.


