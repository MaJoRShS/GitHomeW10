Seção 1 : Começando no jQuery com o pé direito

Começando no JQuery com o pé direito

Aula 1 : O que é o JQuery?

JQuery é uma "lib" que foi feita com base no javascript, e surgiu como uma forma de se fazer uma requisição ajax, com mais facilidade.


Aula 2 : Como o jQuery funciona?

primeiro entra no site do JQuery e acessa a sessão de downloads , e ai você baixa a versão minificada que fica mais leve no site, mais para estudos usamos a descompactada, e para inserir o JQuery na sua pagina é só colocar o "<script type="text/javascript" src="jquery-3.3.1.min.js"></script>" e ai nesse caso é necesario que o nosso arquivo que contem o javascript mesmo seja colocado abaixo do JQuery,porque pode ser que no arquivo JS ja tenha alguma coisa d JQuery.


Seção 2 : Fundamentos do jQuery


Fundamentos do JQuery


Aula 3 : $ vs $()

$.acao = é quando você execulta uma determinada ação dentro do jquery, diretamente a ação.

$(elemento).acao = é quando você manda executar uma ação dentro ou em um elemento especifico.



Aula 4 : $( document ).ready()

Para evitar de ter problemas de carregamento de pagina ou de tentar executar uma ação do JS ou JQuery antes do elemento ter sido carregado o bizu é manda o JQuery executar só quando a pagina já tiver sido totalmente carregada.

$(document).ready(function(){
    alert("Curso de JQuery.");
});

Nesse exemplo eu chamo falo parao JQuery que eu quero que ele execute a minha função só quando o documento html estiver pronto, e a minha função assume que o "alert" é um atributo dela.


outra forma de ter o memso efeito é 
$(function(){
    alert("Curso de JQuery exemplo 2.");
});

Nesse aqui eu não passei o documento html mais memso assim o JQuery intende que só é para execultar o código após o carregamento completo da pagina.


Outra forma de fazer 
function tudoPronto(){
    alert("Tudo Pronto. exemplo 3");
}

$(document).ready(tudoPronto);

Nesse aqui eu criei uma função que será carregada junto com o documento HTML mais ela só vai ser executada quando o documento HTML estiver completamente carregado porque o JQuery vai garantir isso para mim, ai eu passo no "ready" o nome da minha função.


Aula 5 : Evitando conflito com outras bibliotecas

Como entre bibliotecas diferentes os metedos de utilização são os mesmos, podemos criar um atalho diferente para o JQuery, que ele mesmo já deixa por padrão.

var $L = jQuery.noConflict();

$L(document).ready(function(){
    alert("JQuery sendo chamado com $L");
});

que ai da para deixar o "$" para ser utilizado por qualquer outra lib que utilize isso como padrão.

jQuery(document).ready(function(){
    alert("Usando JQuery Nativamente, ou seja sem atalhos.")
});

essa aqui é outra forma de se evitar conflitos, utilizando o JQuery nativamente, é só trocar o "$" por pela palvra "jQuery()".

Aula 6 : Selecionando Elementos do HTML

Aqui para selecionarmos elementos HTML com JQuery é praticamente igual ao JS, mais é mais simples, porque pegamos ele com "$(tag)", e ai ele vai no nosso documento HTML e pega todas as tags com esse nome, para pegarmos apenas uma tag em especifico temos que pegar por "ID", e é a mesma sintax só que com o id  "$(#id);" igual em no css, e quando queremos pegar classes também é igual no css "$(.class);" só que as vezes precisamos pegar elementos dentro de listas e essas listas tem a mesma composição e tem a mesma classe, ai como faremos "$(.class tag.class);" ou "$(.class #id);" que funciona do mesmo jeito.

também tem uma forma de verificar se existe o elemento na pagiana, como 

if($(.botao).length > 0){
    alert ("Tem botão man.");
}

Porque todas as vezes ele sempre retorna um array, e mesmo que o array esteja vazio ele tem info, ou seja sempre vai ser verdadeiro, ai usamos essa validação JS para verificar se o retorno é maior que ZERO.

Ou ainda podemos atribuir o elemento a uma variavel, e para utilizar ele uso a propria variavel ao invés de refazer toda a seleção.

var meuItem = $('.lista2 li.botao');



Aula 7 : Manipulando Atributos de uma TAG

Isso serve para alterarmos atributos de uma tag, e como fazemos isso, primeiro você informa qual o nome da tag que você que pegar e depois usa uma propriedade chamda "attr()" de "attribute" e ai passa dois parâmetros o primeiro é qual atributo daquela tag que você quer alterar e o segundo para o que você quer alterar.

$('a').attr('href', 'https://xvideos.com');

Aqui eu peguei a tag "a" do meu documento HTML, peguei o atributo "href" dele e troquei o conteudo por "https://xvideos.com", mais isso só acontece no carregamento, e para pegar o valor de um atributo é só passar apenas o nome do atributo e ele tras o valor atual dele.

$('a').attr('href');

Assim ele vai trazer só o https://xvideos.com.



Aula 8 : O que fazer após a seleção?

Aqui eu criei uma div, e mesmo sendo uma div eu disse para o JQuery que eu quero mudar o valor que esta dentro dessa div para um outro e ai eu passo assim,

$('#teste').html('Novo TeXXto');

Pegeui pelo "ID" e disse que naquele "ID" eu quero mudar o valor para "Novo TEXXTO".



$('#teste').html();

Para ver o valor que está dentro segue o mesmo esquema do "attr", e deixa em branco.


$('#teste').find('button').addClass('estilo');

Aqui eu procurei o "id" "teste", depois mandei procurar um "button" dentro desse "id" e por ultimo adicionei uma classe usandoo "addClass" com o nome da classe que eu queria que fosse atribuida a esse elemento.


Aula 9 : Manipulando Elementos

Nessa aula ele ta mostrando mais algumas coisas que podem ser alteradas com o JQuery, e uma delas é ao invés de eu colocar "$().html();" eu coloco no lugar do "html" "text" , e nesse caso o JQuery, sabe que eu quero inserir um texto naquele lugar só que se eu tiver colocado TAGS HTML dentro do meu texto ele não interpreta e só printa o que eu mandei como valor.

$('#teste').text('<h1>Novo Texto</h1>');

Aqui apresenta exatamente como está dentro do bloco.

$('#teste').find('img').attr('width', '100');
Essa é uma das forma de se alterar um atributo de um elemento utilizando o "attr" e ai passa o nome do atributo a ser alterado e o valor desse atributo.

mais pode ser feito asssim também

$('#teste').find('img').width('100');

já passando o nome do atribuito como parâmetro e o valor a ser alterado.


Já com os campos "input" como ele não possui um "valor" de conteudo porque ele na teoria só captura valores não da para inserir valor trocando com o ".html();", neste caso temos que utilizar ou o "attr();" , ou utilizamos uma outra propriedade que é o "val();"

$('input').attr('value', 'Anal');

Assim funciona mais é dar muitas voltas.

$('input').val('Anal');

asssim é mais rapido e mais acertivo.


$('input').attr('placeholder', 'PlugAnal').attr('legend','Gay');

Aqui foi um teste meu, para ver se ele aceita varios parâmetros no mesmo "attr" e ele aceitou, 

Dica: Quando vamos alterar o valor que já existe dentro das TAGS "<li>Item 1</li>" usamos o "html();", e sempre que vamos alterar um atributo desse cara usamos o "attr();" mais para campos que não possuem um valor como o "<input type="text" name="nome"/>" utilizamos o "val();"



Para adicionarmos um novo elemento antes ou depois, 


Depois do Elemento
$('input').after('<input type="text" name="sobrenome"/>');



Antes do Elemento
$('input').before('<input type="text" name="sobrenome"/>');


ou só adicionar um novo, ao final de todo o conteudo já existente
$('ul').append("<li>Item 6</li>");


Adicionar um item novo antes do conteudo já existe
$('ul').prepend("<li>Item 0</li>");


Dica : O ".after();" e o ".before();" inserem antes e depois do elemento que foi selecionado.
já o "append();" e o "prepend();" inserem dentro do conteúdo do elemento selecionado respectivamente.


Aula 10 Transformando Elementos em Objetos jQuery


Nessa aula ele mostra como transformar elementos do HTML, em objetos do JQuery e ainda mais como é possivel trabalhar com isso.

var irineu = document.getElementById('div');

Aqui eu to pegando a minha "div" pelo "id" usando JS puro e como é pelo "id" não precisa usar o "#" porque o "getElementById" já declara que é por "id",e para se mandar esse valor atribuido a variavel "irineu" para o JQuery é assim:

$(irineu).html("New Irineu");

Dica: Quando se está passando uma variavel não se usa os apocrifos('').


$(document.getElementById("div")).html("Novo Teste do IRINEu");

Aqui eu estou passando como parâmetro para o JQuery a propria seleção em JS puro e já trabalhando diretamento na seleção.


Para selecionar item dentro de uma lista, apenas itens que possuem o mesmo nome mais nenhum "id" usamos o "eq();"

$('li:eq(1)');

Ele começa a varedura em todos as tags "li" e começa a contagem em zero"0", sendo assim ele vai me devolver a segunda ocorrencia de "li"

$('li').eq(1);

esse é outra forma de se obter o mesmo resultado.


Aqui temos uma forma de como alterar o valor de um item que não possui "id" utilizando os conhecimentos dos exemplos acima, primeiro eu defini que a variavel "eqTeste" seria igual ao item 3 da minha lista.

var eqTeste = $('li').eq(3);

e depois utilizei o JQuery para subistituir apenas o valor dele para mim.

$(eqTeste).html("Meu novo Item de Numero 4");


Aula 11 : Navegando Entre Elementos

Aqui vemos modos de como navegar entre os elementos, mesmo os que não possuem nenhuma identificação de "id" ou "classe", nesse caso em especifico eu tenho uma "div" com uma classe que se chama "filha" e eu quero pegar uma outra "div" apartir dela, então como eu faço isso?
se eu sei que o elemento em questão está envolvendo o elemento em que eu estou eu uso o "parent();"

$('.filha').parent();

mais o "parent();" só pega elementos que envolvem outros como por exemplo uma "div", o "body", uma "table", "ul", etc, essas são forma de busca de um elemento interno para elementos externos.

E ai temos as forma de procura de um elemento externo para os elementos internos.

$('.site').find('.topo').find('.subtopo').find('.filha');

Aqui eu fui pegando elemento por elemento até chegar onde eu queria, claro que como eu sei o nome do elemento (classe ou id dele), eu posso acessalo diretamente, mais essa é uma forma de pesquisa.

$('body').find('div').eq(0);

Nesse caso eu estou procurando a primeira "div" dentro de "body", e mesmo ela tendo uma "class" ele ainda me retorna ela e a class.

$('div').eq(0);

Aqui eu estou procurando uma "div" e não sei o nome da "class" nem do "id" dela eu mando procurar dentro do meu documento HTML a primeira ocorrencia de "div".


$('.irmao').closest('.topo');

Nesse caso aqui em especifico estou procurando uma "div" ou quem tem uma "class" que se chama  (topo), e eu estou em um elemento que tem uma "class" que se chama (irmao), o que eu fiz usei uma função nativa do JQuery que se chama ".closest();" que procura em todo o contexto de ".irmao" onde está o tal do ".topo".

Obs. só funciona se a sua busca for por um elemento que está no mesmo contexto do seu elemento, porque se você tiver uma "div" com 3 "div's" dentro dela formando niveis, o "closest();" só vai retornar ao primeiro nivel, e se não encontrar ele para ali a busca.


$('.irmao').closest('.site').find('.conteudo');

Já nesse caso o que estamos fazendo, retornando ao primeiro nivel de ".irmao" que nesse caso é o ".site" e apartir dele procuro o ".conteudo".

Dica: Só usar o "parent()", quando se tem a certeza que o que você procura está um nivel acima de onde você está, caso contrario use o "find();" ou o "closest();"


Aula 12 : CSS, Styling e Dimensões


Aqui vemos como adicionar ou remover css dos elementos com JQuery, primeiro a classe tem que existir ou no documento HTML ou no proprio arquivo de css,depois é muito simples seleciona o elemento tanto pelo nome(li, ul, div, etc) quanto pelo "id" ou pela "class", e usa uma propriedade do JQuery que é o "addClass();"

$('button').addClass('estilo');

Aqui como eu já estou dizendo que vou adicionar uma classe eu não preciso pasar com o ponto(.) o nome da classe.

$('button').removeClass('estilo');

e aqui é para removermos a classe do elemento selecionado, detalhe ele só remove a classe que você passou as outras vão permancer la.

if ( $('li').hasClass('estilo') ){
	alert("Ies Mein")
}else{
	alert("Nou Mein")
}

Aqui nesse caso estamos fazendo uma verificação para ver se o meu "li" tem a classe "estilo", e utilizamos dessa forma porque o parâmetro "hasClass();" devolver "true" ou "false", e essa informação por sim só não adianta muito por isso já colocamos ele dentro do "if" que dependendo do retorno ele já mostra a mensagem que preparamos.

$('li').css('color', '#ccc');


Aqui estamos acrescentando um estilização especifica no elemento, que também pode ser selecionado de qualquer maneira, nome, id, class, e com o parâmetro ".css();" adicionamos esse estilo novo ao elemento, sempre passando o proredade , valor.


Aula 13 : Guardando dados em um elemento

$('input').attr('data-idade','90');

Aqui temos algumas opções, ou colocamos como ".attr();" e atribuimos os valores nas variaveis, e nesse caso vira um atributo do elemento HTML



$('input').data('idade');

E para acessa-lo fazemos assim, é como se a propriedade ".data();" procurasse um parâmetro com nome "data" e depois do traço é o nome proprimente dito do meu parâmetro.



$('input').data('idade', 25);

Porém quando eu faço dessa forma eu gravo essa info apenas na memoria do navegador(é meio que um cache), e ele não muda minha TAG HTML.



$('input').data('idade');

Acesso o valor que está só na memoria e não no elemento HTML.



$('input').data('texto',$('input').val().length);

Nesse caso estou querendo pegar a quantidade de caracteres que está sendo passada no meu "input", e já estou atribuindo essa valor a memoria com o JQuery, e para acessa-lo é igual o de cima.

$('input').data('texto');


Aula 14 : Métodos Muito Úteis no dia-a-dia


Aqui logo de cara vemos uma função top que é o "$.trim();", o que ele faz, ele remove todos os espaços do seu texto ou variavel que são irelevante, ou seja todo espaço antes e depois da frase ou do texto.



var zeroEspacos = $('.anal').html();

Aqui estou atribuindo o valor da classe anal para a variavel zeroEspacos.



$.trim(zeroEspacos);

aqui estou aplicando o "$.trim();" e removendo todos os espaços antes e depois do texto.



var zeroEspacos = $.trim($('.anal').html());

Aqui é a mesma coisa porém de uma forma mais direta, ao invés de ir parte por parte eu já passo o "$.trim();" com  a seleção JQuery e ai quando eu mostro a variavel ela já esta com o valor formatado.


Outra função nativa do JQuery que serve para varrer arrays ou elementos é a "$.each(function(){});", e ela tem que receber uma função como parâmetro.

$('li').each(function(){
	alert($(this).html());
})

aqui eu to pegando todas as "li" que existem no meu documento HTML e dando um alerta para cada uma delas.


var nome = "Lucas";

$.type(nome);

Aqui eu to definindo uma varialvel e pedindo para o JQuery que ele me de o tipo dessa varialvel.



typeof(anal);

Aqui é com o JS puro, que é mais facil.


Ai ainda temos os esquemas de validação do proprio JQuery que é para saber se uma variaveis é de um determinado tipo como por exemplo "$.isNumeric();"


$.isNumeric(idade);
->true

Aqui eu determinei um valor para a variavel idade e depois verifiquei se aquela variavel é numerica ou não, o retorno é booleano., e tem mais opções como "$.isArray();", "$.isFunction();" etc.

*Vou ter que dar uma estudada a parte nessas paradas*




Aula 15 : FAQ: Como saber se um elemento existe?

Aqui ele mostrou como devemos fazer seleções com o JQuery da maneira correta, toda seleção feita em JQuery sempre retorna um array vazio "[]", ou seja como trouxe retorno mesmoq que vazio sua validação vai dar "treu", então temos que sempre verificar se o array é maior que "0(zero)".


if( $('.anal').length > 0){
	alert("Elemento Existe no Docuemnto");
}else{
	alert("Elemento Não Existe no Documento");
}

Aqui eu to verificando se o elemento existe ainda verificando se o tamanho do array de retorno é maior que "0(zero)".





Aula 16 : FAQ: Como saber se um elemento tem uma classe em particular?


if( $('li').hasClass('nome')){
	alert("Classe existe no documento");
}else{
	alert("Classe não existe no documento");
}


Aqui é igual o exemplo de cima porém é para verificar a existencia de uma classe, ai é utilizado o "$('elemento').hasClass('nomeDaClasse');"



Aula 17 : FAQ: Como ativar/desativar um elemento de formulário?


$('#btn').attr('disabled','disabled');

Aqui eu to selecionando o meu "input" que tem um "id = btn" e adicionando nele o atributo "disabled",que faz com que o meu campo fique readyonly.



$('#btn').removeAttr('disabled');

Aqui eu estou removendo o atributo "disabled" do meu "input".



$('#check').attr('disabled','disabled');

Aqui eu desabilito o campo, ele não pode ser mais acionado com click.


$('#check').removeAttr('disabled');

Aqui eu deixo o campo ativo novamente removendo o atributo "disabled".


$('#check').attr('checked','checked');

Aqui eu estou deixando marcada uma checkbox que tem no meu docuemnto HTML, utilizando JQuery.


$('#check').removeAttr('checked')

e aqui igual ao exemplo de cima removendo o atributo "checked" do meu checkbox.




Aula 18 :  FAQ: Como pegar o Item selecionado de um SELECT?



$('#numeral').val();

Aqui estamos pegando as informações que estão selecionadas dentro do "select" do HTML, e como ele está selecionado eu preciso apenas pegar o valor dele.



$('#numeral').find('option').eq(2).attr('selected','selected');

Nesse caso eu estou pegando pelo "id" e dando procurando em todo o meu documento HTML os "option", após isso eu seto ele na na possição igual a "2" e por ultimo eu adiciono o atributo "selected" com o valor de "selected".




Aula 19 : FAQ: Como alterar o 3º elemento de uma lista de 10 itens?



Aqui ele mostra como selecionar um elemento especifico dentro de uma lista ou de vario elementos do mesmo,

$('li').eq(3).html('Item Alterado.');

Aqui eu pegeui todos os "li" do meu documento HTML, procurei o que está na terceira posição, e alterei o HTML dele.




Aula 20 : FAQ: Como pegar um elemento nativo com jQuery?



Nessa aula fazemos o processo reverso, pegamos um elemento com JQuery e passamos ele para o JS, e ai alteramos ele.

$('li')[2];

Para conseguirmos pegar o elemento com o JQuery como ele sempre devolve um array com todos os elementos dentro e para acessar os elementos de um array é necessario que se passe o numero do elemento que se quer pegar, sempre o primeiro elemento é a posição "0(Zero)", feito isso você tem o elemento fora do JQuery e pode trabalhar com o JS puro.


$('li')[2].innerHTML = "Mudando elemento";

Aqui eu fiz o mesmo processo e ainda alterei o valor do elemento com o "innerHTML="";".




Seção 3 : Eventos, Clicks, Teclado, Mouse, Selects e Ações no jQuery

Aula 21 : O que é um Evento?


Nesta aula ele explica o que é um "evento" e "eventos" nada mais do que to que as ações executadas pelo usuario, ou seja, um movimento de mouse, um redimensionamento de tela, um click, digitar um texto, mover o mouse.


Aula 22 : Definindo Eventos em Elementos DOM

    $('button').click(function(){
        $(this).addClass('estilo')
    });

Aqui eu estou pegando o evento de click no meu botão e quando isso acontece eu adiciono nele a classe "estilo".


$('button').click(function(){
        if($(this).hasClass('estilo')){
            $(this).removeClass ('estilo')
        }else{
            $(this).addClass('estilo')
        }
    });


Aqui é uma validação já com a inserção da classe "estilo" no meu botão(pego bem mal essa frase mais tudo certo,suahsuah), então eu verifico se a classe "estilo" existe no meu botão, e se ela existir eu removo ela do botão, mais se ele não existir eu adiciono.



    $('button').click(function(){
        $(this).toggleClass('estilo');
	});


Já aqui eu estou fazendo  a mesma coisa do exemplo anterior mais com menos linhas de código utilizando a propriedade ".toggleClass('');".


	$('button').mouseover(function(){
		$(this).addClass('estilo');
	});

	$('button').mouseout(function(){
		$(this).removeClass('estilo');
	});

Nesse caso eu estou adicionando uma classe ao meu botão quando eu passo o mouse sobre ele e removendo a classe quando eu retiro o mouse dele.



Aula 23 : Eventos Auxiliadores




  $('button').hover(function(){
        $(this).addClass('estilo');
    },function(){
        $(this).removeClass('estilo');
    });

O ultimo exemplo da aula anterior fica mais facil de ser executado nessa aula, tudo por causa do atributo ".hover( , );" que é igual ao hover do CSS, e ele faz o ".mouseover();" e ".mouseout();"



 $('button').hover(function(){
        $(this).toggleClass('estilo');
    });


Aqui é a mesma coisado exemplo acima, porém como eu to passando o ".toggleClass('');" o JQuery já sabe que eu to querendo adicionar e remover uma classe no meu "button", sempre que eu passar o mouse, então passo o mouse ele adiciona uma classe, e quando eu tiro o mouse ele esconde minha classe.


Aula 24 : Removendo Eventos de um Elemento DOM


    $('button').on('click',function(){
        alert('Clicou Aqui.');
    });

Nesse caso eu to incluindo um evento com o JQuery utilizando a propriedade ".on('', );", que eu passo o nome do meu evento e já passo o que esse evento vai fazer, também é possivel fazera mesma coisa utilizando o ".bind('', );".


    $('button').bind('click',function(){
        alert('Clicou Aqui.');
    });



$('button').off('click');

Aqui eu "desligo" o meu evento.





    $('button').on('click',function(){
        alert('Clicou Aqui.');
    });

    $('button').on('mouseover',function(){
        $(this).addClass('estilo');
    });


    $('button').on('mouseout',function(){
        $(this).removeClass('estilo');
    });

Aqui eu estou adicionando 3 eventos ao mesmo botão, e o que acontece, da para desativar qualquer um deles e os outros se mantem funcionando normalmente da mesma forma.

$('button').off('click');

ou

$('button').off('mouseover');

ou

$('button').off('mouseout');

Assim eu desativo qualquer um dos três eventos e os outros permanecem funcionando.



Aula 25 : Acionamento Falso de Eventos


Nessa aula vemos como falsear eventos, no caso vamos falsear um evento de click.


$('#btn1').on('click',function(){
    $('#btn2').trigger('click');
});


$('#btn2').on('click',function(){
    alert('clicou no 2');
});

Tenho dois botões e quando eu clico no primeiro ele usa a propriedade ".trigger('');" do JQuery e da o click no segundo botão, detalhe que eu setei como retorno na função do primerio botão o ID do segundo mais o propriedade ".trigger('');"

e o ".trigger('');" pode ser utilizado para qualquer ação que eu quiser.


Aula 26 : Propriedades padrão de um Evento

Nessa aula o exemplo é bem pratico, aqui eu consigo tanto ver qual evento está sendo executado como alterar as propriedades default de um evento com JQuery.


$('#btn1').on('click',function(){

    var txt = $('#nome').val();
    alert(txt);
});  

Nessa caso aqui eu estou pegando o que foi digitado em um "input" e dando um alerta com o valor que foi digitado, porém aqui temos um pequeno problema, mesmo dando o alerta, o formulario será enviado, e isso pode ser um problema em determinados casos.


$('#btn1').on('click',function(a){
a.preventDefault();

var txt = $('#nome').val();
alert(txt);

}); 


Já nesse caso, eu estou suprimindo a ação padrão do envio do formulario, utilizando o ".preventDefault();" em branco mesmo, e essa para conseguir utilizar esse propriedade temos que passar pelo menos um parâmetro na chamada da função(no meu caso foi a letra "a", mais pelo que eu percebi pode ser qualquer coisa).



$('#btn1').on('click',function(a){
a.preventDefault();

alert(a.type);
});


Aqui eu estou dando um "alert();" com o evento que acabou de ser executado.


function eventoDoBotao(a){
    a.preventDefault();
    alert(a.type);
}

$(function(){

$('#btn1').on('click', eventoDoBotao);
$('#btn1').on('mouseover', eventoDoBotao);
$('#btn1').on('mouseout', eventoDoBotao);
  
});




Aqui eu declaro o esquema do ".preventDefault();" como uma função no escopo global e uso ela dentro do meu JQuery.


console.log(a.target);
console.log(this);


ambos os exemplos mostram onde que ocorreu aquela ação.


Aula 27 : Eventos de Browser

Aqui temos alguns eventos que são executados pelo Browser e que temos como capturar , alterar e realizar algumas ações pelo JQuery.


    $('.scroll').on('scroll',function(){
        console.log('Scrollou');
        $(this).css('background-color','blue');
    });

Aqui é um evento de "scroll" que eu to capturando o scroll da tela e mudando o "background-color" e apresentando um texto na mudança.


    $(window).on('resize',function(){
        console.log('Mudou o tamanho da TELA.')
    });

Aqui eu capturo o tamanho da tela,e as alterações que tiveram nesse tamanho e printo no "console" uma mensagem, e nesse caso como o que vamos pegar é o tamanho da tela, trabalhamos com a propriedade "window".



Aula 28 : Eventos de Formulário


Nessa aula temos eventos especificos para formularios.

$('#form').on('submit',function(e){
    e.preventDefault();
    console.log('Parei a Execução natural do submit do formulario.')
})


esse evento é o "submit", esse cara pega o envio do formulario para fazer qualquer coisa, como tratamento e/ou validação de informação, já no exemplo acima eu estou alterando o evento padrão de envio, e printando uma mensagem no console.




$('#form').on('select',function(){
    console.log('Algo foi selecionado');
});


Aqui eu to printando no console só quando eu seleciono alguma coisa na tela, e como eu mandei pegar tudo do formulario qualquer seleção no formulario eu consigo identificar, caso eu queira verificar se foi em algum elemento especifico é só colocar a seleção no "ID" dele.


$('#nome, #email').on('select',function(){
    console.log( $(this).val() );
});


Aqui por exemplo eu to mandando printar exatamento o que foi selecionado, ou seja o valor que foi selecionado na tela.


$('#nome,#email').on('focus',function(){
    $(this).addClass('focus');
});

$('#nome,#email').on('blur',function(){
    $(this).removeClass('focus');
});


Aqui eu to usando a propriedade "focus" para todas as vezes que o usuario focar(clicando nele) em um elemento, eu adiciona uma classe, e todas as vezes que esse elemento é desfocado eu removo essa classe usando a propriedade "blur".


$('#idade').on('change',function(){
    console.log( $(this).val() );
});


Aqui nesse caso eu estou pegando os valores que são selecionados do "select" do HTML, e todas as vezes que eu altero ele printa no console o valor.



Aula 29 : Eventos de Teclado

Aqui temos eventos que reconhecem as teclas do teclado e é possivel fazer algumas coisas com eles.

$('#nome').keydown(function () { 
    console.log('Tecla pressionada')
});

$('#nome').keyup(function () { 
    console.log('Tecla solta')
});

Aqui eu mando printar no console toda vez que uma tecla é pressionada e todas vez que a tecla é solta, Obs(eu usei direto a propriedade ".keydown();" e ".keyup();" porque eu instalei um gerenciador de snippts do JQuery que facilita e muito a escrita, e como não tem problema nenhum em utilizar assim ou com o ".on('','');" então zero job.).



$('#nome').keypress(function (e) { 
    console.log( $(this).val());    
});


essa opção eu achei nos snippts, e serve para a mesma coisa só que sem a necessidade de você pegar quando a tecla é pressionada ou solta.



$('#nome').keyup(function (e) { 
    console.log(e.keyCode)
});


Aqui temos uma forma de pegar as teclas que foram digitadas, essas teclas não são exibidas como vemos, mais sim com numeros porque eu estou usando o "keyCode", mais podemos usar apenas o "key" e pegaremos o valor que foi digitado não com numeros mais sim a letra mesmo da tecla.



$('#nome').keyup(function (e) { 
    if(e.keyCode == 13){
        console.log('Apertou o enter')
    }
});



Ou


$('#nome').keyup(function (e) { 
    if(e.key == 'Enter'){
        console.log('Apertou o enter')
    }
});


Aqui temos as duas formas de pegar ou executar alguma coisa com o enter, tanto pegando pelo "keyCode" ou pelo "key" só.


$('#nome').keyup(function (e) { 
    if(e.key == 'Enter'){
        var txt = $(this).val();
        console.log(txt);
        $(this).val('');

    }
});

Nesse exemplo eu to simulando um chat, então eu jogo todo o valor do elemento para uma varialvel, e eu printo no console essa varialvel, e ai por ultimo eu limpo o elemento, mais tudo isso só ocorre quando eu aperto o enter.


Aula 30 : Eventos de Mouse


$('.btn').mousedown(function () { 
    console.log('Clickou saporra é um click.')
});

$('.btn').mouseup(function () { 
    console.log('Soltou saporra é um click.')
});

Aqui basicamente eu to pegando os clicks do mouse em um elemento que não é um botão mais mesmo assim podemos fazer com que se passe por um botão, e é a mesma funcionalidade do "keydown" e do "keyup", quando eu clico ele dispara um evento e quando eu solto o click ele dispara um outro evento.

Obs.(to usando mesmo direto porque fica mais facil e escrevo bem menos)



$('.btn').mouseover(function () { 
    $(this).addClass('estilo');
});

$('.btn').mouseout(function () { 
    $(this).removeClass('estilo');
});


aqui é a mesma parada que já fizemos la atrás, quando se passa o mouse ele adiciona a classe "estilo" e quando se tira o mouse ele remove a classe.



$('.btn').click(function () { 
    console.log('So mostra quando eu solto o botão do mouse')
    
});


Esse cara aqui é o mesmo que o ".mouseup();" só que ele executa o ".mouseup();" junto com o ".click();", basicamente a mesma coisa, mais feita de uma outra maneira.

$('.btn').dblclick(function () { 
    console.log('Dois clicks no mouse')
    
});


Aqui é para capturar quando o usuario der dois clicks no mouse.


Seção: 4

Efeitos Especiais e Animação com jQuery



Aula 31 :  O que são Efeitos?


Introdução a efeitos com JQuery que são coisas que acontecem enquanto eu realizo alguma coisa, por exemplo clico em um botão e ele muda de cor .


Aual 32 :  Fazendo um Elemento Aparecer/Desaparecer na tela

Aqui como funciona eu adiciono e removo alguns elementos ou classes via JQuery, e tem como deixar mais rapido ou mais de vagar.


$('.div').hide('fast');

$('.div').hide('slow');

Aqui eu estou escondendo a minha "div" completa pela sua classe, e aplicando a propriedade "fast" e ou "slow" ele coloca uma animação pelo menos ao invés de sumir do nada com a classe.


$('.div').show('fast');

$('.div').show('slow');


Aqui  é a mesma coisa do de cima porém ele está mostrando a minha "div" com todos os seus efeitos.


$('.div').toggle('fast');

Aqui é uma das formas de fazer com que a classe suma e apareça com o mesmo comando.


$('.btn').click(function () { 
    $('.div').toggle('fast');

});


Aqui a unica diferença é que eu coloquei para que o elemento suma e apareça pelo click do meu "botão" que é uma "div" e não um botão.



Aula 33 : Efeitos de Fade


A propriedade "fade" altera a opacidade do seu elemento, fazendo com que o elemento fique mais transparente é desaparecer sem perder seu tamanho, e depois ele ganha cor até ficar 100% visivel, e para isso usamos ".fadeOut();" e ou ".fadeIn();".



$('.btn').click(function () { 
        $('.div').fadeTo('fast', 1);

    });

$('.btn').click(function () { 
        $('.div').fadeTo('slow', 1);

    });

Aqui temos que fazer diferente, para conseguirmos ir mais rapido ou mais devagar, usamos o ".fadeTo('',);" e nele passamos dois parâmetros, o preimeiro é "fast" ou "slow", e o segundo é o tempo que vai demorar essa transição, indo de "0(zero)" até "1(um)".


$('.btn').click(function () { 
    $('.div').fadeToggle('slow');

    });


$('.btn').click(function () { 
    $('.div').fadeToggle('fast');

    });

Nesse caso é o mesmo esquema do Toggle em qualquer lugar se ele existir ele remove e se não existir ele adiciona, porém é possivel colocar a velocidade.


Aula 34 : Efeitos de Deslizamento (Slide)


Aqui tem uma função bem parecida com o fade, porém ela é propria para esse tipo de transição, que se chama ".slide();"



$('.btn').click(function () { 
    $('.div').slideUp();

    });

$('.btn').click(function () { 
    $('.div').slideUp('slow');
    });

$('.btn').click(function () { 
    $('.div').slideUp('fast');

    });

Aqui temos a função de ".slideUp();" que faz com que o seu menu ou div ou elemento suba até sumir quando ele for clicado(apenas um exemplo), e ainda é possivel colocar as velocidades nele.




$('.btn').click(function () { 
    $('.div').slideDown();

    });


$('.btn').click(function () { 
    $('.div').slideDown('slow');

    });


$('.btn').click(function () { 
    $('.div').slideDown('fast');

    });


Aqui a mesma coisa porém é para que o slide desça por completo e fique visivel para o usuario.

$('.btn').click(function () { 
    $('.div').slideToggle();

    });


$('.btn').click(function () { 
    $('.div').slideToggle('slow');

    });


$('.btn').click(function () { 
    $('.div').slideToggle('fast');

    });


Aqui temos o famoso toggle, e com velocidades diferentes para execução.




Aula 35 :  Animações: Como usar o Animate



A propriedade ".animate({}, );" tem inumeras utilizações, as mais comuns são para transição ou efeitos em botões ou elementos que devem ser deslocados ou alterados, e ao invés de só alterar a propriedade utilizando o que vimos até agora e ficar colocando velocidades fixas como "fast" e "slow"  o animate já tem o esquema de tempo, eu coloco o tempo que eu quero que dure a animação dando ainda mais poder para o DEV.


$('.div').animate({'border-radius': '110px',
                    "height": 200,
                    'width':200,
                    "margin-left":550,
                    'margin-top':150
                    }
, 1500);

});


Aqui temos algumas particularidades, que o primeiro parâmetro do animate é um JSon, onde podemos colocar todas as alterações que vamos fazer naquele elemento, e como podemos ver no exemplo é tudo CSS, e após a ",(virgula)" temos a marcação de tempo, e é em milisegundos sendo assim essa animação vai durar 1.5 segundos.

Obs. ainda podemos utilizar na marcação de tamanho o padrão mostrado acima ou colocar com '' ou ""(aspas simples ou duplas) e só o numero ou a marcação igual CSS ex:"150px" ou 150.


Aula 36 : Animações: Como aplicar Eventos no Animate


Aqui temos algumas coisas a mais que servem para a animação, vimos anteriormente que sempre que vamos trabalhar com o ".animate({},);" passamos um Json como primeiro parâmetro e como segundo paraâmetro um numero que é a velociadade da animação, porém agora sabemso que também temos a opção de passar um segundo Json, como parâmetro no lugar desse tempo de animação, o que faz com que eu tenha ainda mais opções para animações.


$('.div').animate({'border-radius': '110px',
                            'height': 200,
                            'width':200,
                            'margin-left':550,
                            'margin-top':150
                         }
        , {
            duration : 1500,
            complete(){
            console.log("Animação Finalizada");
        },
        start(){
            console.log("Animação Inicializada");
        },
        step(){
            console.log("Passo a passo da animação.");
        }

    });


Aqui temos a opção de "duration: ; " que é a duração da animação propriamente dita, mais como ela está dentro do Json e tem mais parâmetros depois temos que descriminala, e após cara parâmetro novo a separação é por ", (virgula)".

Temos outros 3 parâmetros "start(){}" , "step(){}" , "complete(){}".

O evento "start(){}" é executado no começo da animação, logo que ela é disparada.

O evento "step(){}" é executado em cada passo da animação, ou seja se ela mudou um pixel ele é disparado.

O evento "complete(){}" é executado quando a animação é finalizada.

No exemplo acima não existe nada além de uma mensagem no console, porém é possivel fazer todos os efeitos de animação visto anteriormente dentro de cada parâmetro desse como no exemplo abaixo.



complete(){
    $(".div").css('background-color', 'red');
        console.log("complete.");

}


-> OU <-


$('.btn').click(function () { 
        $('.div').css('background-color','green');
        $('.div').animate({'border-radius': '110px',
                            'height': 200,
                            'width':200,
                            'margin-left':550,
                            'margin-top':150,
                         }
        , {
            duration : 1500,

        start(){
            $('.div').css('background-color','green');
            console.log('start verde')
        },

        step(){
            
            console.log('meio do caminho');
        },  

        complete(){
            $('.div').animate({'border-radius': '0',
                                'height': 250,
                                'width':150,
                                'margin-left':0,
                                'margin-top':0,
                                },    1500);
                                $('.div').css('background-color','blue');
            console.log("complete and back blue.");
            

        }

    
    });
   

    });




Aula 37 : FAQ: Como parar uma animação no meio do processo?



    $('#stop').click(function () {
        $('.div').css('background-color','green');
        $('.div').stop();
     });

É só usar a propriedade "stop();", aqui eu usei junto com tudo que já tinha da aula passada, fazendo com que todas as vezes em que eu parasse a minha animação ela ficava verde.




Aula 38 : FAQ: Como somar/subtrair propriedades na animação?



É só usar os operadores aritiméticos "+=", "-=".

$('#btn').click(function () { 
        $('.div').animate({'margin-left': '+=50'});
});

$('#btn1').click(function () { 
        $('.div').animate({'margin-left': '-=50'});
});


Assim eu incremento e decremento pela quantidade que eu quero.



Seção: 5

Ajax

Aula 39 : O que é AJAX?


Aqui ele explicou que o AJAX é uma requisição que funciona de forma assincrona, e que com o JQuery é possivel fazer essa requisição de uma forma ainda mais simples e descomplicada.



Aula 40 : Conceitos Importantes


Aqui ele só está falando os tipos de envio de um AJAX, que são o GET e o POST, e que sempre que é enviado um ajax ele sempre espera alguns tipos de retorno, como por exempĺo, JSon, HTML, XML, Texto e etc.



Aula 41 : Como monitorar requisições AJAX no navegador?


Aqui ele mostrou o DevTools do Google-Chrome, e onde que você verifica o que está acontecendo em termos de requisição, ou seja onde você se tem ou não um AJAX rodando, que é na aba Network do DevTools, ai ou você deixa aopção "ALL" ativa que vai mostrar tudo que foi carregado no seu navegador ou você marca apenas a opção "XHR" que só vai mostrar os seus AJAX.


Aula 42 : Métodos Auxiliares/Facilitadores de AJAX no jQuery


Aqui tem uma dica que esse maldito não falou no video, AJAX, só funciona se estiver em um servidor, mesmo que seja local, tem que ter um server rodando, porque ao que parece os navegadores recusão qualquer tipo de requisição quando se está usando o prefixo "file:///" o minimo esperado é um "http" ou "https".


$('button').click(function () { 
        $('.div').load("anal.html");   
});


Aqui eu carrego o conteúdo de um outro arquivo dentro da minha "div", porém esse aqui ainda é só um metodo auxiliar do AJAX.





$.get("anal.html", function (data) {
    $('.div').html(data);                
});

Aqui eu estou passando como "GET" o meu AJAX para recuperar o arquivo, ainda é um metodo auxiliar e eu posso passar como nome do parâmetro qualquer coisa, e ai eu passo ele dentro do ".html();" para que esse seja carregado no lugar correto.




$.post("anal.html", function (data) {
    $('.div').html(data);                
});

Aqui é a mesma coisa do exemplo de cima porém aqui é feito pelo metodo "POST" que em geral é mais seguro que o "GET".



Aula 43 : Método Serialize: Pegue todos os dados de um formulário


Existe um parâmetro que auxilia na formatação para envio de AJAX que se chama ".serialize();", esse cara deixa tudo bem formatado no padrão de URL, ou seja cara parâmetro com se nome e valor e separados por "?".


        $('#form').submit(function (e) { 
                e.preventDefault();


                var txt = $(this).serialize();
                console.log(txt);
        });


Aqui eu estou pegando o meu formulario completo e parando a execução padrão dele, ai depois eu pego todas as informações que serão enviadas passo para o ".serialize();" e mando printar na tela.


OBS. para essa parada funcionar todos os parâmetros enviados ter conter a TAG "name="" " porque se não as info não apareceram, e no caso de ter "select" as "option" se não tiverem as propriedade "value" nelas será apresentado o conteúdo no ".serialize();"


Aula 44 : Requisição Ajax Completa usando o método $.ajax


Aqui temos uma requisição completa com AJAX.


    $.ajax({
            type: "GET",
            url: "anal.php",
            data: txt,
            success: function (response) {
                    $('.div').html(response);
            },
            error: function() {  
                    alert('Deu chabu');
            },
            
            
    });


Aqui eu uso o parâmetro "$.ajax({});" onde eu sou obrigado a passar um JSon, e nele eu tenho alguns parâmetros para enviar, o primeiro geralmente é o "type" ou o tipo do meu envio, o segundo é a "url" de onde eu vou enviar e processar o meu AJAX, o terceiro é o "data" que é de onde eu vou pegar os dados para serem enviados no meu caso eu armazenei tudo na variavel "txt" e ai apartir dela eu mando para o meu "serialize();" que formata para poder enviar para o meu AJAX, e ai no final eu tenho duas funções uma de sucesso e outra de erro que servem para avisar se deu certo e errado e ainda ter alguma ação dependendo do resultado, mais como eu estou usando o metodo "GET" tudo vai ficar exposto na url tornando assim o uso apenas para coisas que sejam irelevantes ou não comprometam em nada a integridade do sistema.



    $.ajax({
            type: "POST",
            url: "anal.php",
            data: txt,
            success: function (response) {
                    $('.div').html(response);
            },
            error: function() {  
                    alert('Deu chabu');
            },
            
            
    });


Aqui é igual ao exemplo de cima porém eu estou usando o  metodo "POST", que deixa tudo um pouco mais seguro por não enviar nada via URL e por deixar as coisa mais escondidas, mais o funcionamento é o mesmo.